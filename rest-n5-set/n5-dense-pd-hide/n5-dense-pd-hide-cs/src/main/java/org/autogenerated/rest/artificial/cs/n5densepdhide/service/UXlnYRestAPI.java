package org.autogenerated.rest.artificial.cs.n5densepdhide.service;

import org.autogenerated.rest.artificial.cs.n5densepdhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5densepdhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class UXlnYRestAPI {
  @Autowired private UXlnYRepository uXlnYRepository;

  @RequestMapping(
      value = "/uXlnYs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createUXlnY(@RequestBody UXlnY uXlnY) {
    // an entity with id uXlnY.id should not exist
    if (uXlnYRepository.findById(uXlnY.id).isPresent()) return ResponseEntity.status(400).build();
    UXlnYEntity node = new UXlnYEntity();
    node.setId(uXlnY.id);
    node.setName(uXlnY.name);
    node.setValue(uXlnY.value);
    // save the entity
    uXlnYRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/uXlnYs/{uXlnYsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateUXlnY(
      @PathVariable(name = "uXlnYsId") Integer uXlnYsId, @RequestBody UXlnY uXlnY) {
    uXlnY.id = uXlnYsId;
    UXlnYEntity node = null;
    if (uXlnYRepository.findById(uXlnY.id).isPresent())
      node = uXlnYRepository.findById(uXlnY.id).get();
    else {
      node = new UXlnYEntity();
      node.setId(uXlnY.id);
    }
    node.setName(uXlnY.name);
    node.setValue(uXlnY.value);
    // save the entity
    uXlnYRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/uXlnYs/{uXlnYsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<UXlnY> getUXlnYById(@PathVariable(name = "uXlnYsId") Integer uXlnYsId) {
    if (!uXlnYRepository.findById(uXlnYsId).isPresent()) return ResponseEntity.status(404).build();
    UXlnY dto = uXlnYRepository.findById(uXlnYsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/uXlnYs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<UXlnY>> getAllUXlnY() {
    List<UXlnY> allDtos = new ArrayList<>();
    for (UXlnYEntity e : uXlnYRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/uXlnYs/{uXlnYsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateUXlnYByValues(
      @PathVariable(name = "uXlnYsId") Integer uXlnYsId,
      @RequestParam(name = "uXlnYsname", required = false) String uXlnYsname,
      @RequestParam(name = "uXlnYsvalue", required = false) Integer uXlnYsvalue) {
    if (!uXlnYRepository.findById(uXlnYsId).isPresent()) return ResponseEntity.status(404).build();
    UXlnYEntity node = uXlnYRepository.findById(uXlnYsId).get();
    if (uXlnYsname != null) {
      node.setName(uXlnYsname);
    }
    if (uXlnYsvalue != null) {
      node.setValue(uXlnYsvalue);
    }
    // save the entity
    uXlnYRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/uXlnYs/{uXlnYsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteUXlnY(@PathVariable(name = "uXlnYsId") Integer uXlnYsId) {
    // an entity with id uXlnYsId should exist
    if (!uXlnYRepository.findById(uXlnYsId).isPresent()) return ResponseEntity.status(404).build();
    uXlnYRepository.deleteById(uXlnYsId);
    return ResponseEntity.status(200).build();
  }
}
