package org.autogenerated.rest.artificial.cs.n5densepdhide.service;

import org.autogenerated.rest.artificial.cs.n5densepdhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5densepdhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class ONVqFRestAPI {
  @Autowired private ONVqFRepository oNVqFRepository;
  @Autowired private NGgCHRepository nGgCHRepository;
  @Autowired private WXTGlRepository wXTGlRepository;
  @Autowired private E3gJvRepository e3gJvRepository;
  @Autowired private UXlnYRepository uXlnYRepository;
  @Autowired private E3gJvRestAPI e3gJvRestAPI;
  @Autowired private UXlnYRestAPI uXlnYRestAPI;

  @RequestMapping(
      value = "/oNVqFs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createONVqF(@RequestBody ONVqF oNVqF) {
    // an entity with id oNVqF.id should not exist
    if (oNVqFRepository.findById(oNVqF.id).isPresent()) return ResponseEntity.status(400).build();
    ONVqFEntity node = new ONVqFEntity();
    node.setId(oNVqF.id);
    // create owned entity
    E3gJv ownedDto0 = new E3gJv();
    ownedDto0.name = oNVqF.e3gJvName;
    ownedDto0.value = oNVqF.e3gJvValue;
    ownedDto0.id = oNVqF.e3gJvId;
    int ownedDto0Code = e3gJvRestAPI.createE3gJv(ownedDto0).getStatusCode().value();
    if (!e3gJvRepository.findById(oNVqF.e3gJvId).isPresent())
      return ResponseEntity.status(ownedDto0Code).build();
    E3gJvEntity ownedEntityE3gJvEntity = e3gJvRepository.findById(oNVqF.e3gJvId).get();
    node.setOwnedE3gJv(ownedEntityE3gJvEntity);
    UXlnY ownedDto1 = new UXlnY();
    ownedDto1.name = oNVqF.uXlnYName;
    ownedDto1.value = oNVqF.uXlnYValue;
    ownedDto1.id = oNVqF.uXlnYId;
    int ownedDto1Code = uXlnYRestAPI.createUXlnY(ownedDto1).getStatusCode().value();
    if (!uXlnYRepository.findById(oNVqF.uXlnYId).isPresent())
      return ResponseEntity.status(ownedDto1Code).build();
    UXlnYEntity ownedEntityUXlnYEntity = uXlnYRepository.findById(oNVqF.uXlnYId).get();
    node.setOwnedUXlnY(ownedEntityUXlnYEntity);
    // refer to related entity
    if (!nGgCHRepository.findById(oNVqF.nGgCHId).isPresent())
      return ResponseEntity.status(404).build();
    NGgCHEntity referVarToNGgCHEntity = nGgCHRepository.findById(oNVqF.nGgCHId).get();
    node.setNGgCH(referVarToNGgCHEntity);
    if (!wXTGlRepository.findById(oNVqF.wXTGlId).isPresent())
      return ResponseEntity.status(404).build();
    WXTGlEntity referVarToWXTGlEntity = wXTGlRepository.findById(oNVqF.wXTGlId).get();
    node.setWXTGl(referVarToWXTGlEntity);
    node.setName(oNVqF.name);
    node.setValue(oNVqF.value);
    // additional codes for handling dependency
    if (!(Util.medium(new double[] {ownedDto0.value * 1.0, ownedDto1.value * 1.0})
            < Util.medium(
                new double[] {
                  referVarToNGgCHEntity.getValue() * 1.0, referVarToWXTGlEntity.getValue() * 1.0
                })
        && Util.average(new double[] {ownedDto0.value * 1.0, ownedDto1.value * 1.0})
            < Util.average(
                new double[] {
                  referVarToNGgCHEntity.getValue() * 1.0, referVarToWXTGlEntity.getValue() * 1.0
                }))) return ResponseEntity.status(400).build();
    // save the entity
    oNVqFRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/oNVqFs/{oNVqFsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateONVqF(
      @PathVariable(name = "oNVqFsId") Integer oNVqFsId, @RequestBody ONVqF oNVqF) {
    oNVqF.id = oNVqFsId;
    ONVqFEntity node = null;
    if (oNVqFRepository.findById(oNVqF.id).isPresent())
      node = oNVqFRepository.findById(oNVqF.id).get();
    else {
      node = new ONVqFEntity();
      node.setId(oNVqF.id);
    }
    // create owned entity
    E3gJv ownedDto0 = new E3gJv();
    ownedDto0.name = oNVqF.e3gJvName;
    ownedDto0.value = oNVqF.e3gJvValue;
    ownedDto0.id = oNVqF.e3gJvId;
    int ownedDto0Code = e3gJvRestAPI.createE3gJv(ownedDto0).getStatusCode().value();
    if (!e3gJvRepository.findById(oNVqF.e3gJvId).isPresent())
      return ResponseEntity.status(ownedDto0Code).build();
    E3gJvEntity ownedEntityE3gJvEntity = e3gJvRepository.findById(oNVqF.e3gJvId).get();
    node.setOwnedE3gJv(ownedEntityE3gJvEntity);
    UXlnY ownedDto1 = new UXlnY();
    ownedDto1.name = oNVqF.uXlnYName;
    ownedDto1.value = oNVqF.uXlnYValue;
    ownedDto1.id = oNVqF.uXlnYId;
    int ownedDto1Code = uXlnYRestAPI.createUXlnY(ownedDto1).getStatusCode().value();
    if (!uXlnYRepository.findById(oNVqF.uXlnYId).isPresent())
      return ResponseEntity.status(ownedDto1Code).build();
    UXlnYEntity ownedEntityUXlnYEntity = uXlnYRepository.findById(oNVqF.uXlnYId).get();
    node.setOwnedUXlnY(ownedEntityUXlnYEntity);
    // refer to related entity
    if (!nGgCHRepository.findById(oNVqF.nGgCHId).isPresent())
      return ResponseEntity.status(404).build();
    NGgCHEntity referVarToNGgCHEntity = nGgCHRepository.findById(oNVqF.nGgCHId).get();
    node.setNGgCH(referVarToNGgCHEntity);
    if (!wXTGlRepository.findById(oNVqF.wXTGlId).isPresent())
      return ResponseEntity.status(404).build();
    WXTGlEntity referVarToWXTGlEntity = wXTGlRepository.findById(oNVqF.wXTGlId).get();
    node.setWXTGl(referVarToWXTGlEntity);
    node.setName(oNVqF.name);
    node.setValue(oNVqF.value);
    // additional codes for handling dependency
    if (!(Util.medium(new double[] {ownedDto0.value * 1.0, ownedDto1.value * 1.0})
            < Util.medium(
                new double[] {
                  referVarToNGgCHEntity.getValue() * 1.0, referVarToWXTGlEntity.getValue() * 1.0
                })
        && Util.average(new double[] {ownedDto0.value * 1.0, ownedDto1.value * 1.0})
            < Util.average(
                new double[] {
                  referVarToNGgCHEntity.getValue() * 1.0, referVarToWXTGlEntity.getValue() * 1.0
                }))) return ResponseEntity.status(400).build();
    // save the entity
    oNVqFRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/oNVqFs/{oNVqFsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<ONVqF> getONVqFById(@PathVariable(name = "oNVqFsId") Integer oNVqFsId) {
    if (!oNVqFRepository.findById(oNVqFsId).isPresent()) return ResponseEntity.status(404).build();
    ONVqF dto = oNVqFRepository.findById(oNVqFsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/oNVqFs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<ONVqF>> getAllONVqF() {
    List<ONVqF> allDtos = new ArrayList<>();
    for (ONVqFEntity e : oNVqFRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/oNVqFs/{oNVqFsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateONVqFByValues(
      @PathVariable(name = "oNVqFsId") Integer oNVqFsId,
      @RequestParam(name = "oNVqFsname", required = false) String oNVqFsname,
      @RequestParam(name = "oNVqFsvalue", required = false) Integer oNVqFsvalue,
      @RequestParam(name = "nGgCHId", required = false) Integer nGgCHId,
      @RequestParam(name = "wXTGlId", required = false) Integer wXTGlId,
      @RequestParam(name = "e3gJvName", required = false) String e3gJvName,
      @RequestParam(name = "e3gJvValue", required = false) Integer e3gJvValue,
      @RequestParam(name = "uXlnYName", required = false) String uXlnYName,
      @RequestParam(name = "uXlnYValue", required = false) Integer uXlnYValue) {
    if (!oNVqFRepository.findById(oNVqFsId).isPresent()) return ResponseEntity.status(404).build();
    ONVqFEntity node = oNVqFRepository.findById(oNVqFsId).get();
    // update owned entity
    if (!e3gJvRepository.findById(node.getOwnedE3gJv().getId()).isPresent())
      return ResponseEntity.status(404).build();
    E3gJvEntity ownedEntity0 = e3gJvRepository.findById(node.getOwnedE3gJv().getId()).get();
    if (e3gJvName != null || e3gJvValue != null) {
      if (e3gJvName != null) ownedEntity0.setName(e3gJvName);
      if (e3gJvValue != null) ownedEntity0.setValue(e3gJvValue);
      e3gJvRepository.save(ownedEntity0);
    }
    E3gJv ownedDto0 = ownedEntity0.getDto();
    if (!uXlnYRepository.findById(node.getOwnedUXlnY().getId()).isPresent())
      return ResponseEntity.status(404).build();
    UXlnYEntity ownedEntity1 = uXlnYRepository.findById(node.getOwnedUXlnY().getId()).get();
    if (uXlnYName != null || uXlnYValue != null) {
      if (uXlnYName != null) ownedEntity1.setName(uXlnYName);
      if (uXlnYValue != null) ownedEntity1.setValue(uXlnYValue);
      uXlnYRepository.save(ownedEntity1);
    }
    UXlnY ownedDto1 = ownedEntity1.getDto();
    // refer to related entity
    NGgCHEntity referVarToNGgCHEntity = null;
    if (nGgCHId != null) {
      if (!nGgCHRepository.findById(nGgCHId).isPresent()) return ResponseEntity.status(400).build();
      referVarToNGgCHEntity = nGgCHRepository.findById(nGgCHId).get();
      node.setNGgCH(referVarToNGgCHEntity);
    } else {
      referVarToNGgCHEntity = node.getNGgCH();
    }
    WXTGlEntity referVarToWXTGlEntity = null;
    if (wXTGlId != null) {
      if (!wXTGlRepository.findById(wXTGlId).isPresent()) return ResponseEntity.status(400).build();
      referVarToWXTGlEntity = wXTGlRepository.findById(wXTGlId).get();
      node.setWXTGl(referVarToWXTGlEntity);
    } else {
      referVarToWXTGlEntity = node.getWXTGl();
    }
    if (oNVqFsname != null) {
      node.setName(oNVqFsname);
    }
    if (oNVqFsvalue != null) {
      node.setValue(oNVqFsvalue);
    }
    // additional codes for handling dependency
    if (!(Util.medium(new double[] {ownedDto0.value * 1.0, ownedDto1.value * 1.0})
            < Util.medium(
                new double[] {
                  referVarToNGgCHEntity.getValue() * 1.0, referVarToWXTGlEntity.getValue() * 1.0
                })
        && Util.average(new double[] {ownedDto0.value * 1.0, ownedDto1.value * 1.0})
            < Util.average(
                new double[] {
                  referVarToNGgCHEntity.getValue() * 1.0, referVarToWXTGlEntity.getValue() * 1.0
                }))) return ResponseEntity.status(400).build();
    // save the entity
    oNVqFRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/oNVqFs/{oNVqFsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteONVqF(@PathVariable(name = "oNVqFsId") Integer oNVqFsId) {
    // an entity with id oNVqFsId should exist
    if (!oNVqFRepository.findById(oNVqFsId).isPresent()) return ResponseEntity.status(404).build();
    oNVqFRepository.deleteById(oNVqFsId);
    return ResponseEntity.status(200).build();
  }
}
