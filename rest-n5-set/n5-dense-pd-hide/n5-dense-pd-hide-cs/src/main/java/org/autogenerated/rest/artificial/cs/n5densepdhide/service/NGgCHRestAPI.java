package org.autogenerated.rest.artificial.cs.n5densepdhide.service;

import org.autogenerated.rest.artificial.cs.n5densepdhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5densepdhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class NGgCHRestAPI {
  @Autowired private NGgCHRepository nGgCHRepository;

  @RequestMapping(
      value = "/nGgCHs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createNGgCH(@RequestBody NGgCH nGgCH) {
    // an entity with id nGgCH.id should not exist
    if (nGgCHRepository.findById(nGgCH.id).isPresent()) return ResponseEntity.status(400).build();
    NGgCHEntity node = new NGgCHEntity();
    node.setId(nGgCH.id);
    node.setName(nGgCH.name);
    node.setValue(nGgCH.value);
    // save the entity
    nGgCHRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/nGgCHs/{nGgCHsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateNGgCH(
      @PathVariable(name = "nGgCHsId") Integer nGgCHsId, @RequestBody NGgCH nGgCH) {
    nGgCH.id = nGgCHsId;
    NGgCHEntity node = null;
    if (nGgCHRepository.findById(nGgCH.id).isPresent())
      node = nGgCHRepository.findById(nGgCH.id).get();
    else {
      node = new NGgCHEntity();
      node.setId(nGgCH.id);
    }
    node.setName(nGgCH.name);
    node.setValue(nGgCH.value);
    // save the entity
    nGgCHRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/nGgCHs/{nGgCHsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<NGgCH> getNGgCHById(@PathVariable(name = "nGgCHsId") Integer nGgCHsId) {
    if (!nGgCHRepository.findById(nGgCHsId).isPresent()) return ResponseEntity.status(404).build();
    NGgCH dto = nGgCHRepository.findById(nGgCHsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/nGgCHs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<NGgCH>> getAllNGgCH() {
    List<NGgCH> allDtos = new ArrayList<>();
    for (NGgCHEntity e : nGgCHRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/nGgCHs/{nGgCHsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateNGgCHByValues(
      @PathVariable(name = "nGgCHsId") Integer nGgCHsId,
      @RequestParam(name = "nGgCHsname", required = false) String nGgCHsname,
      @RequestParam(name = "nGgCHsvalue", required = false) Integer nGgCHsvalue) {
    if (!nGgCHRepository.findById(nGgCHsId).isPresent()) return ResponseEntity.status(404).build();
    NGgCHEntity node = nGgCHRepository.findById(nGgCHsId).get();
    if (nGgCHsname != null) {
      node.setName(nGgCHsname);
    }
    if (nGgCHsvalue != null) {
      node.setValue(nGgCHsvalue);
    }
    // save the entity
    nGgCHRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/nGgCHs/{nGgCHsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteNGgCH(@PathVariable(name = "nGgCHsId") Integer nGgCHsId) {
    // an entity with id nGgCHsId should exist
    if (!nGgCHRepository.findById(nGgCHsId).isPresent()) return ResponseEntity.status(404).build();
    nGgCHRepository.deleteById(nGgCHsId);
    return ResponseEntity.status(200).build();
  }
}
