package org.autogenerated.rest.artificial.cs.n5mediumhide.service;

import org.autogenerated.rest.artificial.cs.n5mediumhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class U1rAlRestAPI {
  @Autowired private U1rAlRepository u1rAlRepository;

  @RequestMapping(
      value = "/u1rAls",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createU1rAl(@RequestBody U1rAl u1rAl) {
    // an entity with id u1rAl.id should not exist
    if (u1rAlRepository.findById(u1rAl.id).isPresent()) return ResponseEntity.status(400).build();
    U1rAlEntity node = new U1rAlEntity();
    node.setId(u1rAl.id);
    node.setName(u1rAl.name);
    node.setValue(u1rAl.value);
    // save the entity
    u1rAlRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/u1rAls/{u1rAlsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateU1rAl(
      @PathVariable(name = "u1rAlsId") Integer u1rAlsId, @RequestBody U1rAl u1rAl) {
    u1rAl.id = u1rAlsId;
    U1rAlEntity node = null;
    if (u1rAlRepository.findById(u1rAl.id).isPresent())
      node = u1rAlRepository.findById(u1rAl.id).get();
    else {
      node = new U1rAlEntity();
      node.setId(u1rAl.id);
    }
    node.setName(u1rAl.name);
    node.setValue(u1rAl.value);
    // save the entity
    u1rAlRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/u1rAls/{u1rAlsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<U1rAl> getU1rAlById(@PathVariable(name = "u1rAlsId") Integer u1rAlsId) {
    if (!u1rAlRepository.findById(u1rAlsId).isPresent()) return ResponseEntity.status(404).build();
    U1rAl dto = u1rAlRepository.findById(u1rAlsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/u1rAls",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<U1rAl>> getAllU1rAl() {
    List<U1rAl> allDtos = new ArrayList<>();
    for (U1rAlEntity e : u1rAlRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/u1rAls/{u1rAlsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateU1rAlByValues(
      @PathVariable(name = "u1rAlsId") Integer u1rAlsId,
      @RequestParam(name = "u1rAlsname", required = false) String u1rAlsname,
      @RequestParam(name = "u1rAlsvalue", required = false) Integer u1rAlsvalue) {
    if (!u1rAlRepository.findById(u1rAlsId).isPresent()) return ResponseEntity.status(404).build();
    U1rAlEntity node = u1rAlRepository.findById(u1rAlsId).get();
    if (u1rAlsname != null) {
      node.setName(u1rAlsname);
    }
    if (u1rAlsvalue != null) {
      node.setValue(u1rAlsvalue);
    }
    // save the entity
    u1rAlRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/u1rAls/{u1rAlsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteU1rAl(@PathVariable(name = "u1rAlsId") Integer u1rAlsId) {
    // an entity with id u1rAlsId should exist
    if (!u1rAlRepository.findById(u1rAlsId).isPresent()) return ResponseEntity.status(404).build();
    u1rAlRepository.deleteById(u1rAlsId);
    return ResponseEntity.status(200).build();
  }
}
