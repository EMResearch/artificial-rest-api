package org.autogenerated.rest.artificial.cs.n5mediumhide.service;

import org.autogenerated.rest.artificial.cs.n5mediumhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class HErqDRestAPI {
  @Autowired private HErqDRepository hErqDRepository;
  @Autowired private XpOCtRepository xpOCtRepository;

  @RequestMapping(
      value = "/hErqDs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createHErqD(@RequestBody HErqD hErqD) {
    // an entity with id hErqD.id should not exist
    if (hErqDRepository.findById(hErqD.id).isPresent()) return ResponseEntity.status(400).build();
    HErqDEntity node = new HErqDEntity();
    node.setId(hErqD.id);
    // refer to related entity
    if (!xpOCtRepository.findById(hErqD.xpOCtId).isPresent())
      return ResponseEntity.status(404).build();
    XpOCtEntity referVarToXpOCtEntity = xpOCtRepository.findById(hErqD.xpOCtId).get();
    node.setXpOCt(referVarToXpOCtEntity);
    node.setName(hErqD.name);
    node.setValue(hErqD.value);
    // save the entity
    hErqDRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/hErqDs/{hErqDsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateHErqD(
      @PathVariable(name = "hErqDsId") Integer hErqDsId, @RequestBody HErqD hErqD) {
    hErqD.id = hErqDsId;
    HErqDEntity node = null;
    if (hErqDRepository.findById(hErqD.id).isPresent())
      node = hErqDRepository.findById(hErqD.id).get();
    else {
      node = new HErqDEntity();
      node.setId(hErqD.id);
    }
    // refer to related entity
    if (!xpOCtRepository.findById(hErqD.xpOCtId).isPresent())
      return ResponseEntity.status(404).build();
    XpOCtEntity referVarToXpOCtEntity = xpOCtRepository.findById(hErqD.xpOCtId).get();
    node.setXpOCt(referVarToXpOCtEntity);
    node.setName(hErqD.name);
    node.setValue(hErqD.value);
    // save the entity
    hErqDRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/hErqDs/{hErqDsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<HErqD> getHErqDById(@PathVariable(name = "hErqDsId") Integer hErqDsId) {
    if (!hErqDRepository.findById(hErqDsId).isPresent()) return ResponseEntity.status(404).build();
    HErqD dto = hErqDRepository.findById(hErqDsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/hErqDs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<HErqD>> getAllHErqD() {
    List<HErqD> allDtos = new ArrayList<>();
    for (HErqDEntity e : hErqDRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/hErqDs/{hErqDsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateHErqDByValues(
      @PathVariable(name = "hErqDsId") Integer hErqDsId,
      @RequestParam(name = "hErqDsname", required = false) String hErqDsname,
      @RequestParam(name = "hErqDsvalue", required = false) Integer hErqDsvalue,
      @RequestParam(name = "xpOCtId", required = false) Integer xpOCtId) {
    if (!hErqDRepository.findById(hErqDsId).isPresent()) return ResponseEntity.status(404).build();
    HErqDEntity node = hErqDRepository.findById(hErqDsId).get();
    // refer to related entity
    XpOCtEntity referVarToXpOCtEntity = null;
    if (xpOCtId != null) {
      if (!xpOCtRepository.findById(xpOCtId).isPresent()) return ResponseEntity.status(400).build();
      referVarToXpOCtEntity = xpOCtRepository.findById(xpOCtId).get();
      node.setXpOCt(referVarToXpOCtEntity);
    } else {
      referVarToXpOCtEntity = node.getXpOCt();
    }
    if (hErqDsname != null) {
      node.setName(hErqDsname);
    }
    if (hErqDsvalue != null) {
      node.setValue(hErqDsvalue);
    }
    // save the entity
    hErqDRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/hErqDs/{hErqDsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteHErqD(@PathVariable(name = "hErqDsId") Integer hErqDsId) {
    // an entity with id hErqDsId should exist
    if (!hErqDRepository.findById(hErqDsId).isPresent()) return ResponseEntity.status(404).build();
    hErqDRepository.deleteById(hErqDsId);
    return ResponseEntity.status(200).build();
  }
}
