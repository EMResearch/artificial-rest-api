package org.autogenerated.rest.artificial.cs.n5mediumhide.service;

import org.autogenerated.rest.artificial.cs.n5mediumhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class XpOCtRestAPI {
  @Autowired private XpOCtRepository xpOCtRepository;
  @Autowired private U1rAlRepository u1rAlRepository;

  @RequestMapping(
      value = "/xpOCts",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createXpOCt(@RequestBody XpOCt xpOCt) {
    // an entity with id xpOCt.id should not exist
    if (xpOCtRepository.findById(xpOCt.id).isPresent()) return ResponseEntity.status(400).build();
    XpOCtEntity node = new XpOCtEntity();
    node.setId(xpOCt.id);
    // refer to related entity
    if (!u1rAlRepository.findById(xpOCt.u1rAlId).isPresent())
      return ResponseEntity.status(404).build();
    U1rAlEntity referVarToU1rAlEntity = u1rAlRepository.findById(xpOCt.u1rAlId).get();
    node.setU1rAl(referVarToU1rAlEntity);
    node.setName(xpOCt.name);
    node.setValue(xpOCt.value);
    // save the entity
    xpOCtRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/xpOCts/{xpOCtsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateXpOCt(
      @PathVariable(name = "xpOCtsId") Integer xpOCtsId, @RequestBody XpOCt xpOCt) {
    xpOCt.id = xpOCtsId;
    XpOCtEntity node = null;
    if (xpOCtRepository.findById(xpOCt.id).isPresent())
      node = xpOCtRepository.findById(xpOCt.id).get();
    else {
      node = new XpOCtEntity();
      node.setId(xpOCt.id);
    }
    // refer to related entity
    if (!u1rAlRepository.findById(xpOCt.u1rAlId).isPresent())
      return ResponseEntity.status(404).build();
    U1rAlEntity referVarToU1rAlEntity = u1rAlRepository.findById(xpOCt.u1rAlId).get();
    node.setU1rAl(referVarToU1rAlEntity);
    node.setName(xpOCt.name);
    node.setValue(xpOCt.value);
    // save the entity
    xpOCtRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/xpOCts/{xpOCtsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<XpOCt> getXpOCtById(@PathVariable(name = "xpOCtsId") Integer xpOCtsId) {
    if (!xpOCtRepository.findById(xpOCtsId).isPresent()) return ResponseEntity.status(404).build();
    XpOCt dto = xpOCtRepository.findById(xpOCtsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/xpOCts",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<XpOCt>> getAllXpOCt() {
    List<XpOCt> allDtos = new ArrayList<>();
    for (XpOCtEntity e : xpOCtRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/xpOCts/{xpOCtsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateXpOCtByValues(
      @PathVariable(name = "xpOCtsId") Integer xpOCtsId,
      @RequestParam(name = "xpOCtsname", required = false) String xpOCtsname,
      @RequestParam(name = "xpOCtsvalue", required = false) Integer xpOCtsvalue,
      @RequestParam(name = "u1rAlId", required = false) Integer u1rAlId) {
    if (!xpOCtRepository.findById(xpOCtsId).isPresent()) return ResponseEntity.status(404).build();
    XpOCtEntity node = xpOCtRepository.findById(xpOCtsId).get();
    // refer to related entity
    U1rAlEntity referVarToU1rAlEntity = null;
    if (u1rAlId != null) {
      if (!u1rAlRepository.findById(u1rAlId).isPresent()) return ResponseEntity.status(400).build();
      referVarToU1rAlEntity = u1rAlRepository.findById(u1rAlId).get();
      node.setU1rAl(referVarToU1rAlEntity);
    } else {
      referVarToU1rAlEntity = node.getU1rAl();
    }
    if (xpOCtsname != null) {
      node.setName(xpOCtsname);
    }
    if (xpOCtsvalue != null) {
      node.setValue(xpOCtsvalue);
    }
    // save the entity
    xpOCtRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/xpOCts/{xpOCtsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteXpOCt(@PathVariable(name = "xpOCtsId") Integer xpOCtsId) {
    // an entity with id xpOCtsId should exist
    if (!xpOCtRepository.findById(xpOCtsId).isPresent()) return ResponseEntity.status(404).build();
    xpOCtRepository.deleteById(xpOCtsId);
    return ResponseEntity.status(200).build();
  }
}
