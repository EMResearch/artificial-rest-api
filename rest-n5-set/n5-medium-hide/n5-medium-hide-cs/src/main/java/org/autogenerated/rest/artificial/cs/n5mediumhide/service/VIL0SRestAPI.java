package org.autogenerated.rest.artificial.cs.n5mediumhide.service;

import org.autogenerated.rest.artificial.cs.n5mediumhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class VIL0SRestAPI {
  @Autowired private VIL0SRepository vIL0SRepository;
  @Autowired private HErqDRepository hErqDRepository;

  @RequestMapping(
      value = "/vIL0Ss",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createVIL0S(@RequestBody VIL0S vIL0S) {
    // an entity with id vIL0S.id should not exist
    if (vIL0SRepository.findById(vIL0S.id).isPresent()) return ResponseEntity.status(400).build();
    VIL0SEntity node = new VIL0SEntity();
    node.setId(vIL0S.id);
    // refer to related entity
    if (!hErqDRepository.findById(vIL0S.hErqDId).isPresent())
      return ResponseEntity.status(404).build();
    HErqDEntity referVarToHErqDEntity = hErqDRepository.findById(vIL0S.hErqDId).get();
    node.setHErqD(referVarToHErqDEntity);
    node.setName(vIL0S.name);
    node.setValue(vIL0S.value);
    // save the entity
    vIL0SRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/vIL0Ss/{vIL0SsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateVIL0S(
      @PathVariable(name = "vIL0SsId") Integer vIL0SsId, @RequestBody VIL0S vIL0S) {
    vIL0S.id = vIL0SsId;
    VIL0SEntity node = null;
    if (vIL0SRepository.findById(vIL0S.id).isPresent())
      node = vIL0SRepository.findById(vIL0S.id).get();
    else {
      node = new VIL0SEntity();
      node.setId(vIL0S.id);
    }
    // refer to related entity
    if (!hErqDRepository.findById(vIL0S.hErqDId).isPresent())
      return ResponseEntity.status(404).build();
    HErqDEntity referVarToHErqDEntity = hErqDRepository.findById(vIL0S.hErqDId).get();
    node.setHErqD(referVarToHErqDEntity);
    node.setName(vIL0S.name);
    node.setValue(vIL0S.value);
    // save the entity
    vIL0SRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/vIL0Ss/{vIL0SsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<VIL0S> getVIL0SById(@PathVariable(name = "vIL0SsId") Integer vIL0SsId) {
    if (!vIL0SRepository.findById(vIL0SsId).isPresent()) return ResponseEntity.status(404).build();
    VIL0S dto = vIL0SRepository.findById(vIL0SsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/vIL0Ss",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<VIL0S>> getAllVIL0S() {
    List<VIL0S> allDtos = new ArrayList<>();
    for (VIL0SEntity e : vIL0SRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/vIL0Ss/{vIL0SsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateVIL0SByValues(
      @PathVariable(name = "vIL0SsId") Integer vIL0SsId,
      @RequestParam(name = "vIL0Ssname", required = false) String vIL0Ssname,
      @RequestParam(name = "vIL0Ssvalue", required = false) Integer vIL0Ssvalue,
      @RequestParam(name = "hErqDId", required = false) Integer hErqDId) {
    if (!vIL0SRepository.findById(vIL0SsId).isPresent()) return ResponseEntity.status(404).build();
    VIL0SEntity node = vIL0SRepository.findById(vIL0SsId).get();
    // refer to related entity
    HErqDEntity referVarToHErqDEntity = null;
    if (hErqDId != null) {
      if (!hErqDRepository.findById(hErqDId).isPresent()) return ResponseEntity.status(400).build();
      referVarToHErqDEntity = hErqDRepository.findById(hErqDId).get();
      node.setHErqD(referVarToHErqDEntity);
    } else {
      referVarToHErqDEntity = node.getHErqD();
    }
    if (vIL0Ssname != null) {
      node.setName(vIL0Ssname);
    }
    if (vIL0Ssvalue != null) {
      node.setValue(vIL0Ssvalue);
    }
    // save the entity
    vIL0SRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/vIL0Ss/{vIL0SsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteVIL0S(@PathVariable(name = "vIL0SsId") Integer vIL0SsId) {
    // an entity with id vIL0SsId should exist
    if (!vIL0SRepository.findById(vIL0SsId).isPresent()) return ResponseEntity.status(404).build();
    vIL0SRepository.deleteById(vIL0SsId);
    return ResponseEntity.status(200).build();
  }
}
