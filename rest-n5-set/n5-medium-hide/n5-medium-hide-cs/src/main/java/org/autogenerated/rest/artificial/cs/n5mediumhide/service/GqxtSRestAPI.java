package org.autogenerated.rest.artificial.cs.n5mediumhide.service;

import org.autogenerated.rest.artificial.cs.n5mediumhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class GqxtSRestAPI {
  @Autowired private GqxtSRepository gqxtSRepository;

  @RequestMapping(
      value = "/gqxtSs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createGqxtS(@RequestBody GqxtS gqxtS) {
    // an entity with id gqxtS.id should not exist
    if (gqxtSRepository.findById(gqxtS.id).isPresent()) return ResponseEntity.status(400).build();
    GqxtSEntity node = new GqxtSEntity();
    node.setId(gqxtS.id);
    node.setName(gqxtS.name);
    node.setValue(gqxtS.value);
    // save the entity
    gqxtSRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/gqxtSs/{gqxtSsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateGqxtS(
      @PathVariable(name = "gqxtSsId") Integer gqxtSsId, @RequestBody GqxtS gqxtS) {
    gqxtS.id = gqxtSsId;
    GqxtSEntity node = null;
    if (gqxtSRepository.findById(gqxtS.id).isPresent())
      node = gqxtSRepository.findById(gqxtS.id).get();
    else {
      node = new GqxtSEntity();
      node.setId(gqxtS.id);
    }
    node.setName(gqxtS.name);
    node.setValue(gqxtS.value);
    // save the entity
    gqxtSRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/gqxtSs/{gqxtSsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<GqxtS> getGqxtSById(@PathVariable(name = "gqxtSsId") Integer gqxtSsId) {
    if (!gqxtSRepository.findById(gqxtSsId).isPresent()) return ResponseEntity.status(404).build();
    GqxtS dto = gqxtSRepository.findById(gqxtSsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/gqxtSs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<GqxtS>> getAllGqxtS() {
    List<GqxtS> allDtos = new ArrayList<>();
    for (GqxtSEntity e : gqxtSRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/gqxtSs/{gqxtSsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateGqxtSByValues(
      @PathVariable(name = "gqxtSsId") Integer gqxtSsId,
      @RequestParam(name = "gqxtSsname", required = false) String gqxtSsname,
      @RequestParam(name = "gqxtSsvalue", required = false) Integer gqxtSsvalue) {
    if (!gqxtSRepository.findById(gqxtSsId).isPresent()) return ResponseEntity.status(404).build();
    GqxtSEntity node = gqxtSRepository.findById(gqxtSsId).get();
    if (gqxtSsname != null) {
      node.setName(gqxtSsname);
    }
    if (gqxtSsvalue != null) {
      node.setValue(gqxtSsvalue);
    }
    // save the entity
    gqxtSRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/gqxtSs/{gqxtSsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteGqxtS(@PathVariable(name = "gqxtSsId") Integer gqxtSsId) {
    // an entity with id gqxtSsId should exist
    if (!gqxtSRepository.findById(gqxtSsId).isPresent()) return ResponseEntity.status(404).build();
    gqxtSRepository.deleteById(gqxtSsId);
    return ResponseEntity.status(200).build();
  }
}
