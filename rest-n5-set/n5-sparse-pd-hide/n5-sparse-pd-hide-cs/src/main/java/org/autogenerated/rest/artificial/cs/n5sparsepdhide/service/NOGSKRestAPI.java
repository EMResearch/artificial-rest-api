package org.autogenerated.rest.artificial.cs.n5sparsepdhide.service;

import org.autogenerated.rest.artificial.cs.n5sparsepdhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparsepdhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class NOGSKRestAPI {
  @Autowired private NOGSKRepository nOGSKRepository;

  @RequestMapping(
      value = "/nOGSKs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createNOGSK(@RequestBody NOGSK nOGSK) {
    // an entity with id nOGSK.id should not exist
    if (nOGSKRepository.findById(nOGSK.id).isPresent()) return ResponseEntity.status(400).build();
    NOGSKEntity node = new NOGSKEntity();
    node.setId(nOGSK.id);
    node.setName(nOGSK.name);
    node.setValue(nOGSK.value);
    // save the entity
    nOGSKRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/nOGSKs/{nOGSKsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateNOGSK(
      @PathVariable(name = "nOGSKsId") Integer nOGSKsId, @RequestBody NOGSK nOGSK) {
    nOGSK.id = nOGSKsId;
    NOGSKEntity node = null;
    if (nOGSKRepository.findById(nOGSK.id).isPresent())
      node = nOGSKRepository.findById(nOGSK.id).get();
    else {
      node = new NOGSKEntity();
      node.setId(nOGSK.id);
    }
    node.setName(nOGSK.name);
    node.setValue(nOGSK.value);
    // save the entity
    nOGSKRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/nOGSKs/{nOGSKsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<NOGSK> getNOGSKById(@PathVariable(name = "nOGSKsId") Integer nOGSKsId) {
    if (!nOGSKRepository.findById(nOGSKsId).isPresent()) return ResponseEntity.status(404).build();
    NOGSK dto = nOGSKRepository.findById(nOGSKsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/nOGSKs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<NOGSK>> getAllNOGSK() {
    List<NOGSK> allDtos = new ArrayList<>();
    for (NOGSKEntity e : nOGSKRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/nOGSKs/{nOGSKsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateNOGSKByValues(
      @PathVariable(name = "nOGSKsId") Integer nOGSKsId,
      @RequestParam(name = "nOGSKsname", required = false) String nOGSKsname,
      @RequestParam(name = "nOGSKsvalue", required = false) Integer nOGSKsvalue) {
    if (!nOGSKRepository.findById(nOGSKsId).isPresent()) return ResponseEntity.status(404).build();
    NOGSKEntity node = nOGSKRepository.findById(nOGSKsId).get();
    if (nOGSKsname != null) {
      node.setName(nOGSKsname);
    }
    if (nOGSKsvalue != null) {
      node.setValue(nOGSKsvalue);
    }
    // save the entity
    nOGSKRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/nOGSKs/{nOGSKsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteNOGSK(@PathVariable(name = "nOGSKsId") Integer nOGSKsId) {
    // an entity with id nOGSKsId should exist
    if (!nOGSKRepository.findById(nOGSKsId).isPresent()) return ResponseEntity.status(404).build();
    nOGSKRepository.deleteById(nOGSKsId);
    return ResponseEntity.status(200).build();
  }
}
