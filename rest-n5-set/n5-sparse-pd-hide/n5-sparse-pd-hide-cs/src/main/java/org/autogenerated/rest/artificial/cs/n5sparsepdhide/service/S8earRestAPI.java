package org.autogenerated.rest.artificial.cs.n5sparsepdhide.service;

import org.autogenerated.rest.artificial.cs.n5sparsepdhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparsepdhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class S8earRestAPI {
  @Autowired private S8earRepository s8earRepository;

  @RequestMapping(
      value = "/s8ears",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createS8ear(@RequestBody S8ear s8ear) {
    // an entity with id s8ear.id should not exist
    if (s8earRepository.findById(s8ear.id).isPresent()) return ResponseEntity.status(400).build();
    S8earEntity node = new S8earEntity();
    node.setId(s8ear.id);
    node.setName(s8ear.name);
    node.setValue(s8ear.value);
    // save the entity
    s8earRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/s8ears/{s8earsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateS8ear(
      @PathVariable(name = "s8earsId") Integer s8earsId, @RequestBody S8ear s8ear) {
    s8ear.id = s8earsId;
    S8earEntity node = null;
    if (s8earRepository.findById(s8ear.id).isPresent())
      node = s8earRepository.findById(s8ear.id).get();
    else {
      node = new S8earEntity();
      node.setId(s8ear.id);
    }
    node.setName(s8ear.name);
    node.setValue(s8ear.value);
    // save the entity
    s8earRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/s8ears/{s8earsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<S8ear> getS8earById(@PathVariable(name = "s8earsId") Integer s8earsId) {
    if (!s8earRepository.findById(s8earsId).isPresent()) return ResponseEntity.status(404).build();
    S8ear dto = s8earRepository.findById(s8earsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/s8ears",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<S8ear>> getAllS8ear() {
    List<S8ear> allDtos = new ArrayList<>();
    for (S8earEntity e : s8earRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/s8ears/{s8earsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateS8earByValues(
      @PathVariable(name = "s8earsId") Integer s8earsId,
      @RequestParam(name = "s8earsname", required = false) String s8earsname,
      @RequestParam(name = "s8earsvalue", required = false) Integer s8earsvalue) {
    if (!s8earRepository.findById(s8earsId).isPresent()) return ResponseEntity.status(404).build();
    S8earEntity node = s8earRepository.findById(s8earsId).get();
    if (s8earsname != null) {
      node.setName(s8earsname);
    }
    if (s8earsvalue != null) {
      node.setValue(s8earsvalue);
    }
    // save the entity
    s8earRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/s8ears/{s8earsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteS8ear(@PathVariable(name = "s8earsId") Integer s8earsId) {
    // an entity with id s8earsId should exist
    if (!s8earRepository.findById(s8earsId).isPresent()) return ResponseEntity.status(404).build();
    s8earRepository.deleteById(s8earsId);
    return ResponseEntity.status(200).build();
  }
}
