package org.autogenerated.rest.artificial.cs.n5sparsepdhide.service;

import org.autogenerated.rest.artificial.cs.n5sparsepdhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparsepdhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class XPvzdRestAPI {
  @Autowired private XPvzdRepository xPvzdRepository;

  @RequestMapping(
      value = "/xPvzds",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createXPvzd(@RequestBody XPvzd xPvzd) {
    // an entity with id xPvzd.id should not exist
    if (xPvzdRepository.findById(xPvzd.id).isPresent()) return ResponseEntity.status(400).build();
    XPvzdEntity node = new XPvzdEntity();
    node.setId(xPvzd.id);
    node.setName(xPvzd.name);
    node.setValue(xPvzd.value);
    // save the entity
    xPvzdRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/xPvzds/{xPvzdsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateXPvzd(
      @PathVariable(name = "xPvzdsId") Integer xPvzdsId, @RequestBody XPvzd xPvzd) {
    xPvzd.id = xPvzdsId;
    XPvzdEntity node = null;
    if (xPvzdRepository.findById(xPvzd.id).isPresent())
      node = xPvzdRepository.findById(xPvzd.id).get();
    else {
      node = new XPvzdEntity();
      node.setId(xPvzd.id);
    }
    node.setName(xPvzd.name);
    node.setValue(xPvzd.value);
    // save the entity
    xPvzdRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/xPvzds/{xPvzdsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<XPvzd> getXPvzdById(@PathVariable(name = "xPvzdsId") Integer xPvzdsId) {
    if (!xPvzdRepository.findById(xPvzdsId).isPresent()) return ResponseEntity.status(404).build();
    XPvzd dto = xPvzdRepository.findById(xPvzdsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/xPvzds",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<XPvzd>> getAllXPvzd() {
    List<XPvzd> allDtos = new ArrayList<>();
    for (XPvzdEntity e : xPvzdRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/xPvzds/{xPvzdsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateXPvzdByValues(
      @PathVariable(name = "xPvzdsId") Integer xPvzdsId,
      @RequestParam(name = "xPvzdsname", required = false) String xPvzdsname,
      @RequestParam(name = "xPvzdsvalue", required = false) Integer xPvzdsvalue) {
    if (!xPvzdRepository.findById(xPvzdsId).isPresent()) return ResponseEntity.status(404).build();
    XPvzdEntity node = xPvzdRepository.findById(xPvzdsId).get();
    if (xPvzdsname != null) {
      node.setName(xPvzdsname);
    }
    if (xPvzdsvalue != null) {
      node.setValue(xPvzdsvalue);
    }
    // save the entity
    xPvzdRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/xPvzds/{xPvzdsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteXPvzd(@PathVariable(name = "xPvzdsId") Integer xPvzdsId) {
    // an entity with id xPvzdsId should exist
    if (!xPvzdRepository.findById(xPvzdsId).isPresent()) return ResponseEntity.status(404).build();
    xPvzdRepository.deleteById(xPvzdsId);
    return ResponseEntity.status(200).build();
  }
}
