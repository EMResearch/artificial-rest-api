package org.autogenerated.rest.artificial.cs.n5densepdshown.service;

import org.autogenerated.rest.artificial.cs.n5densepdshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5densepdshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class UEearRestAPI {
  @Autowired private UEearRepository uEearRepository;
  @Autowired private B8v25Repository b8v25Repository;
  @Autowired private IUJWoRepository iUJWoRepository;
  @Autowired private OEXmzRepository oEXmzRepository;
  @Autowired private W27dtRepository w27dtRepository;
  @Autowired private OEXmzRestAPI oEXmzRestAPI;
  @Autowired private W27dtRestAPI w27dtRestAPI;

  @RequestMapping(
      value = "/iUJWos/{iUJWoId}/b8v25s/{b8v25Id}/uEears",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createUEear(
      @RequestBody UEear uEear,
      @PathVariable(name = "b8v25Id") Integer b8v25Id,
      @PathVariable(name = "iUJWoId") Integer iUJWoId) {
    // an entity with id uEear.id should not exist
    if (uEearRepository.findById(uEear.id).isPresent()) return ResponseEntity.status(400).build();
    UEearEntity node = new UEearEntity();
    node.setId(uEear.id);
    // create owned entity
    OEXmz ownedDto0 = new OEXmz();
    ownedDto0.name = uEear.oEXmzName;
    ownedDto0.value = uEear.oEXmzValue;
    ownedDto0.id = uEear.oEXmzId;
    int ownedDto0Code = oEXmzRestAPI.createOEXmz(ownedDto0).getStatusCode().value();
    if (!oEXmzRepository.findById(uEear.oEXmzId).isPresent())
      return ResponseEntity.status(ownedDto0Code).build();
    OEXmzEntity ownedEntityOEXmzEntity = oEXmzRepository.findById(uEear.oEXmzId).get();
    node.setOwnedOEXmz(ownedEntityOEXmzEntity);
    W27dt ownedDto1 = new W27dt();
    ownedDto1.name = uEear.w27dtName;
    ownedDto1.value = uEear.w27dtValue;
    ownedDto1.id = uEear.w27dtId;
    int ownedDto1Code = w27dtRestAPI.createW27dt(ownedDto1).getStatusCode().value();
    if (!w27dtRepository.findById(uEear.w27dtId).isPresent())
      return ResponseEntity.status(ownedDto1Code).build();
    W27dtEntity ownedEntityW27dtEntity = w27dtRepository.findById(uEear.w27dtId).get();
    node.setOwnedW27dt(ownedEntityW27dtEntity);
    // refer to related entity
    if (!b8v25Repository.findById(uEear.b8v25Id).isPresent())
      return ResponseEntity.status(404).build();
    B8v25Entity referVarToB8v25Entity = b8v25Repository.findById(uEear.b8v25Id).get();
    node.setB8v25(referVarToB8v25Entity);
    if (!iUJWoRepository.findById(uEear.iUJWoId).isPresent())
      return ResponseEntity.status(404).build();
    IUJWoEntity referVarToIUJWoEntity = iUJWoRepository.findById(uEear.iUJWoId).get();
    node.setIUJWo(referVarToIUJWoEntity);
    node.setName(uEear.name);
    node.setValue(uEear.value);
    // additional codes for handling dependency
    if (!(Util.medium(new double[] {ownedDto0.value * 1.0, ownedDto1.value * 1.0})
            < Util.medium(
                new double[] {
                  referVarToB8v25Entity.getValue() * 1.0, referVarToIUJWoEntity.getValue() * 1.0
                })
        && Util.average(new double[] {ownedDto0.value * 1.0, ownedDto1.value * 1.0})
            < Util.average(
                new double[] {
                  referVarToB8v25Entity.getValue() * 1.0, referVarToIUJWoEntity.getValue() * 1.0
                }))) return ResponseEntity.status(400).build();
    // save the entity
    uEearRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/iUJWos/{iUJWoId}/b8v25s/{b8v25Id}/uEears/{uEearsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateUEear(
      @PathVariable(name = "uEearsId") Integer uEearsId,
      @RequestBody UEear uEear,
      @PathVariable(name = "b8v25Id") Integer b8v25Id,
      @PathVariable(name = "iUJWoId") Integer iUJWoId) {
    uEear.id = uEearsId;
    UEearEntity node = null;
    if (uEearRepository.findById(uEear.id).isPresent())
      node = uEearRepository.findById(uEear.id).get();
    else {
      node = new UEearEntity();
      node.setId(uEear.id);
    }
    // create owned entity
    OEXmz ownedDto0 = new OEXmz();
    ownedDto0.name = uEear.oEXmzName;
    ownedDto0.value = uEear.oEXmzValue;
    ownedDto0.id = uEear.oEXmzId;
    int ownedDto0Code = oEXmzRestAPI.createOEXmz(ownedDto0).getStatusCode().value();
    if (!oEXmzRepository.findById(uEear.oEXmzId).isPresent())
      return ResponseEntity.status(ownedDto0Code).build();
    OEXmzEntity ownedEntityOEXmzEntity = oEXmzRepository.findById(uEear.oEXmzId).get();
    node.setOwnedOEXmz(ownedEntityOEXmzEntity);
    W27dt ownedDto1 = new W27dt();
    ownedDto1.name = uEear.w27dtName;
    ownedDto1.value = uEear.w27dtValue;
    ownedDto1.id = uEear.w27dtId;
    int ownedDto1Code = w27dtRestAPI.createW27dt(ownedDto1).getStatusCode().value();
    if (!w27dtRepository.findById(uEear.w27dtId).isPresent())
      return ResponseEntity.status(ownedDto1Code).build();
    W27dtEntity ownedEntityW27dtEntity = w27dtRepository.findById(uEear.w27dtId).get();
    node.setOwnedW27dt(ownedEntityW27dtEntity);
    // refer to related entity
    if (!b8v25Repository.findById(uEear.b8v25Id).isPresent())
      return ResponseEntity.status(404).build();
    B8v25Entity referVarToB8v25Entity = b8v25Repository.findById(uEear.b8v25Id).get();
    node.setB8v25(referVarToB8v25Entity);
    if (!iUJWoRepository.findById(uEear.iUJWoId).isPresent())
      return ResponseEntity.status(404).build();
    IUJWoEntity referVarToIUJWoEntity = iUJWoRepository.findById(uEear.iUJWoId).get();
    node.setIUJWo(referVarToIUJWoEntity);
    node.setName(uEear.name);
    node.setValue(uEear.value);
    // additional codes for handling dependency
    if (!(Util.medium(new double[] {ownedDto0.value * 1.0, ownedDto1.value * 1.0})
            < Util.medium(
                new double[] {
                  referVarToB8v25Entity.getValue() * 1.0, referVarToIUJWoEntity.getValue() * 1.0
                })
        && Util.average(new double[] {ownedDto0.value * 1.0, ownedDto1.value * 1.0})
            < Util.average(
                new double[] {
                  referVarToB8v25Entity.getValue() * 1.0, referVarToIUJWoEntity.getValue() * 1.0
                }))) return ResponseEntity.status(400).build();
    // save the entity
    uEearRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/iUJWos/{iUJWoId}/b8v25s/{b8v25Id}/uEears/{uEearsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<UEear> getUEearById(
      @PathVariable(name = "uEearsId") Integer uEearsId,
      @PathVariable(name = "b8v25Id") Integer b8v25Id,
      @PathVariable(name = "iUJWoId") Integer iUJWoId) {
    if (!uEearRepository.findById(uEearsId).isPresent()) return ResponseEntity.status(404).build();
    UEear dto = uEearRepository.findById(uEearsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/iUJWos/{iUJWoId}/b8v25s/{b8v25Id}/uEears",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<UEear>> getAllWithConditionUEear(
      @PathVariable(name = "b8v25Id") Integer b8v25Id,
      @PathVariable(name = "iUJWoId") Integer iUJWoId) {
    List<UEear> allDtos = new ArrayList<>();
    for (UEearEntity e : uEearRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/iUJWos/{iUJWoId}/b8v25s/{b8v25Id}/uEears/{uEearsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateUEearByValues(
      @PathVariable(name = "uEearsId") Integer uEearsId,
      @RequestParam(name = "uEearsname", required = false) String uEearsname,
      @RequestParam(name = "uEearsvalue", required = false) Integer uEearsvalue,
      @PathVariable(name = "b8v25Id") Integer b8v25Id,
      @PathVariable(name = "iUJWoId") Integer iUJWoId,
      @RequestParam(name = "oEXmzName", required = false) String oEXmzName,
      @RequestParam(name = "oEXmzValue", required = false) Integer oEXmzValue,
      @RequestParam(name = "w27dtName", required = false) String w27dtName,
      @RequestParam(name = "w27dtValue", required = false) Integer w27dtValue) {
    if (!uEearRepository.findById(uEearsId).isPresent()) return ResponseEntity.status(404).build();
    UEearEntity node = uEearRepository.findById(uEearsId).get();
    // update owned entity
    if (!oEXmzRepository.findById(node.getOwnedOEXmz().getId()).isPresent())
      return ResponseEntity.status(404).build();
    OEXmzEntity ownedEntity0 = oEXmzRepository.findById(node.getOwnedOEXmz().getId()).get();
    if (oEXmzName != null || oEXmzValue != null) {
      if (oEXmzName != null) ownedEntity0.setName(oEXmzName);
      if (oEXmzValue != null) ownedEntity0.setValue(oEXmzValue);
      oEXmzRepository.save(ownedEntity0);
    }
    OEXmz ownedDto0 = ownedEntity0.getDto();
    if (!w27dtRepository.findById(node.getOwnedW27dt().getId()).isPresent())
      return ResponseEntity.status(404).build();
    W27dtEntity ownedEntity1 = w27dtRepository.findById(node.getOwnedW27dt().getId()).get();
    if (w27dtName != null || w27dtValue != null) {
      if (w27dtName != null) ownedEntity1.setName(w27dtName);
      if (w27dtValue != null) ownedEntity1.setValue(w27dtValue);
      w27dtRepository.save(ownedEntity1);
    }
    W27dt ownedDto1 = ownedEntity1.getDto();
    // refer to related entity
    B8v25Entity referVarToB8v25Entity = null;
    if (b8v25Id != null) {
      if (!b8v25Repository.findById(b8v25Id).isPresent()) return ResponseEntity.status(400).build();
      referVarToB8v25Entity = b8v25Repository.findById(b8v25Id).get();
      node.setB8v25(referVarToB8v25Entity);
    } else {
      referVarToB8v25Entity = node.getB8v25();
    }
    IUJWoEntity referVarToIUJWoEntity = null;
    if (iUJWoId != null) {
      if (!iUJWoRepository.findById(iUJWoId).isPresent()) return ResponseEntity.status(400).build();
      referVarToIUJWoEntity = iUJWoRepository.findById(iUJWoId).get();
      node.setIUJWo(referVarToIUJWoEntity);
    } else {
      referVarToIUJWoEntity = node.getIUJWo();
    }
    if (uEearsname != null) {
      node.setName(uEearsname);
    }
    if (uEearsvalue != null) {
      node.setValue(uEearsvalue);
    }
    // additional codes for handling dependency
    if (!(Util.medium(new double[] {ownedDto0.value * 1.0, ownedDto1.value * 1.0})
            < Util.medium(
                new double[] {
                  referVarToB8v25Entity.getValue() * 1.0, referVarToIUJWoEntity.getValue() * 1.0
                })
        && Util.average(new double[] {ownedDto0.value * 1.0, ownedDto1.value * 1.0})
            < Util.average(
                new double[] {
                  referVarToB8v25Entity.getValue() * 1.0, referVarToIUJWoEntity.getValue() * 1.0
                }))) return ResponseEntity.status(400).build();
    // save the entity
    uEearRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/iUJWos/{iUJWoId}/b8v25s/{b8v25Id}/uEears/{uEearsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteWithConditionUEear(
      @PathVariable(name = "uEearsId") Integer uEearsId,
      @PathVariable(name = "b8v25Id") Integer b8v25Id,
      @PathVariable(name = "iUJWoId") Integer iUJWoId) {
    // an entity with id uEearsId should exist
    if (!uEearRepository.findById(uEearsId).isPresent()) return ResponseEntity.status(404).build();
    uEearRepository.deleteById(uEearsId);
    return ResponseEntity.status(200).build();
  }
}
