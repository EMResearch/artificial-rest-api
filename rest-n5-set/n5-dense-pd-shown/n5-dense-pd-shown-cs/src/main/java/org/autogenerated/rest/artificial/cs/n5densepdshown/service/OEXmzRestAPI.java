package org.autogenerated.rest.artificial.cs.n5densepdshown.service;

import org.autogenerated.rest.artificial.cs.n5densepdshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5densepdshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class OEXmzRestAPI {
  @Autowired private OEXmzRepository oEXmzRepository;

  @RequestMapping(
      value = "/oEXmzs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOEXmz(@RequestBody OEXmz oEXmz) {
    // an entity with id oEXmz.id should not exist
    if (oEXmzRepository.findById(oEXmz.id).isPresent()) return ResponseEntity.status(400).build();
    OEXmzEntity node = new OEXmzEntity();
    node.setId(oEXmz.id);
    node.setName(oEXmz.name);
    node.setValue(oEXmz.value);
    // save the entity
    oEXmzRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/oEXmzs/{oEXmzsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateOEXmz(
      @PathVariable(name = "oEXmzsId") Integer oEXmzsId, @RequestBody OEXmz oEXmz) {
    oEXmz.id = oEXmzsId;
    OEXmzEntity node = null;
    if (oEXmzRepository.findById(oEXmz.id).isPresent())
      node = oEXmzRepository.findById(oEXmz.id).get();
    else {
      node = new OEXmzEntity();
      node.setId(oEXmz.id);
    }
    node.setName(oEXmz.name);
    node.setValue(oEXmz.value);
    // save the entity
    oEXmzRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/oEXmzs/{oEXmzsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<OEXmz> getOEXmzById(@PathVariable(name = "oEXmzsId") Integer oEXmzsId) {
    if (!oEXmzRepository.findById(oEXmzsId).isPresent()) return ResponseEntity.status(404).build();
    OEXmz dto = oEXmzRepository.findById(oEXmzsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/oEXmzs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<OEXmz>> getAllOEXmz() {
    List<OEXmz> allDtos = new ArrayList<>();
    for (OEXmzEntity e : oEXmzRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/oEXmzs/{oEXmzsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateOEXmzByValues(
      @PathVariable(name = "oEXmzsId") Integer oEXmzsId,
      @RequestParam(name = "oEXmzsname", required = false) String oEXmzsname,
      @RequestParam(name = "oEXmzsvalue", required = false) Integer oEXmzsvalue) {
    if (!oEXmzRepository.findById(oEXmzsId).isPresent()) return ResponseEntity.status(404).build();
    OEXmzEntity node = oEXmzRepository.findById(oEXmzsId).get();
    if (oEXmzsname != null) {
      node.setName(oEXmzsname);
    }
    if (oEXmzsvalue != null) {
      node.setValue(oEXmzsvalue);
    }
    // save the entity
    oEXmzRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/oEXmzs/{oEXmzsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteOEXmz(@PathVariable(name = "oEXmzsId") Integer oEXmzsId) {
    // an entity with id oEXmzsId should exist
    if (!oEXmzRepository.findById(oEXmzsId).isPresent()) return ResponseEntity.status(404).build();
    oEXmzRepository.deleteById(oEXmzsId);
    return ResponseEntity.status(200).build();
  }
}
