package org.autogenerated.rest.artificial.cs.n5densepdshown.service;

import org.autogenerated.rest.artificial.cs.n5densepdshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5densepdshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class W27dtRestAPI {
  @Autowired private W27dtRepository w27dtRepository;

  @RequestMapping(
      value = "/w27dts",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createW27dt(@RequestBody W27dt w27dt) {
    // an entity with id w27dt.id should not exist
    if (w27dtRepository.findById(w27dt.id).isPresent()) return ResponseEntity.status(400).build();
    W27dtEntity node = new W27dtEntity();
    node.setId(w27dt.id);
    node.setName(w27dt.name);
    node.setValue(w27dt.value);
    // save the entity
    w27dtRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/w27dts/{w27dtsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateW27dt(
      @PathVariable(name = "w27dtsId") Integer w27dtsId, @RequestBody W27dt w27dt) {
    w27dt.id = w27dtsId;
    W27dtEntity node = null;
    if (w27dtRepository.findById(w27dt.id).isPresent())
      node = w27dtRepository.findById(w27dt.id).get();
    else {
      node = new W27dtEntity();
      node.setId(w27dt.id);
    }
    node.setName(w27dt.name);
    node.setValue(w27dt.value);
    // save the entity
    w27dtRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/w27dts/{w27dtsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<W27dt> getW27dtById(@PathVariable(name = "w27dtsId") Integer w27dtsId) {
    if (!w27dtRepository.findById(w27dtsId).isPresent()) return ResponseEntity.status(404).build();
    W27dt dto = w27dtRepository.findById(w27dtsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/w27dts",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<W27dt>> getAllW27dt() {
    List<W27dt> allDtos = new ArrayList<>();
    for (W27dtEntity e : w27dtRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/w27dts/{w27dtsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateW27dtByValues(
      @PathVariable(name = "w27dtsId") Integer w27dtsId,
      @RequestParam(name = "w27dtsname", required = false) String w27dtsname,
      @RequestParam(name = "w27dtsvalue", required = false) Integer w27dtsvalue) {
    if (!w27dtRepository.findById(w27dtsId).isPresent()) return ResponseEntity.status(404).build();
    W27dtEntity node = w27dtRepository.findById(w27dtsId).get();
    if (w27dtsname != null) {
      node.setName(w27dtsname);
    }
    if (w27dtsvalue != null) {
      node.setValue(w27dtsvalue);
    }
    // save the entity
    w27dtRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/w27dts/{w27dtsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteW27dt(@PathVariable(name = "w27dtsId") Integer w27dtsId) {
    // an entity with id w27dtsId should exist
    if (!w27dtRepository.findById(w27dtsId).isPresent()) return ResponseEntity.status(404).build();
    w27dtRepository.deleteById(w27dtsId);
    return ResponseEntity.status(200).build();
  }
}
