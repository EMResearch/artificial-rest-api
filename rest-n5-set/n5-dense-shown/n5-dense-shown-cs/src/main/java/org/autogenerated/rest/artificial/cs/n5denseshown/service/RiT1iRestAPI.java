package org.autogenerated.rest.artificial.cs.n5denseshown.service;

import org.autogenerated.rest.artificial.cs.n5denseshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5denseshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class RiT1iRestAPI {
  @Autowired private RiT1iRepository riT1iRepository;

  @RequestMapping(
      value = "/riT1is",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createRiT1i(@RequestBody RiT1i riT1i) {
    // an entity with id riT1i.id should not exist
    if (riT1iRepository.findById(riT1i.id).isPresent()) return ResponseEntity.status(400).build();
    RiT1iEntity node = new RiT1iEntity();
    node.setId(riT1i.id);
    node.setName(riT1i.name);
    node.setValue(riT1i.value);
    // save the entity
    riT1iRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/riT1is/{riT1isId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateRiT1i(
      @PathVariable(name = "riT1isId") Integer riT1isId, @RequestBody RiT1i riT1i) {
    riT1i.id = riT1isId;
    RiT1iEntity node = null;
    if (riT1iRepository.findById(riT1i.id).isPresent())
      node = riT1iRepository.findById(riT1i.id).get();
    else {
      node = new RiT1iEntity();
      node.setId(riT1i.id);
    }
    node.setName(riT1i.name);
    node.setValue(riT1i.value);
    // save the entity
    riT1iRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/riT1is/{riT1isId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<RiT1i> getRiT1iById(@PathVariable(name = "riT1isId") Integer riT1isId) {
    if (!riT1iRepository.findById(riT1isId).isPresent()) return ResponseEntity.status(404).build();
    RiT1i dto = riT1iRepository.findById(riT1isId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/riT1is",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<RiT1i>> getAllRiT1i() {
    List<RiT1i> allDtos = new ArrayList<>();
    for (RiT1iEntity e : riT1iRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/riT1is/{riT1isId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateRiT1iByValues(
      @PathVariable(name = "riT1isId") Integer riT1isId,
      @RequestParam(name = "riT1isname", required = false) String riT1isname,
      @RequestParam(name = "riT1isvalue", required = false) Integer riT1isvalue) {
    if (!riT1iRepository.findById(riT1isId).isPresent()) return ResponseEntity.status(404).build();
    RiT1iEntity node = riT1iRepository.findById(riT1isId).get();
    if (riT1isname != null) {
      node.setName(riT1isname);
    }
    if (riT1isvalue != null) {
      node.setValue(riT1isvalue);
    }
    // save the entity
    riT1iRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/riT1is/{riT1isId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteRiT1i(@PathVariable(name = "riT1isId") Integer riT1isId) {
    // an entity with id riT1isId should exist
    if (!riT1iRepository.findById(riT1isId).isPresent()) return ResponseEntity.status(404).build();
    riT1iRepository.deleteById(riT1isId);
    return ResponseEntity.status(200).build();
  }
}
