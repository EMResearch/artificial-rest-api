package org.autogenerated.rest.artificial.cs.n5denseshown.service;

import org.autogenerated.rest.artificial.cs.n5denseshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5denseshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class AS7ExRestAPI {
  @Autowired private AS7ExRepository aS7ExRepository;

  @RequestMapping(
      value = "/aS7Exs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createAS7Ex(@RequestBody AS7Ex aS7Ex) {
    // an entity with id aS7Ex.id should not exist
    if (aS7ExRepository.findById(aS7Ex.id).isPresent()) return ResponseEntity.status(400).build();
    AS7ExEntity node = new AS7ExEntity();
    node.setId(aS7Ex.id);
    node.setName(aS7Ex.name);
    node.setValue(aS7Ex.value);
    // save the entity
    aS7ExRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/aS7Exs/{aS7ExsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateAS7Ex(
      @PathVariable(name = "aS7ExsId") Integer aS7ExsId, @RequestBody AS7Ex aS7Ex) {
    aS7Ex.id = aS7ExsId;
    AS7ExEntity node = null;
    if (aS7ExRepository.findById(aS7Ex.id).isPresent())
      node = aS7ExRepository.findById(aS7Ex.id).get();
    else {
      node = new AS7ExEntity();
      node.setId(aS7Ex.id);
    }
    node.setName(aS7Ex.name);
    node.setValue(aS7Ex.value);
    // save the entity
    aS7ExRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/aS7Exs/{aS7ExsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<AS7Ex> getAS7ExById(@PathVariable(name = "aS7ExsId") Integer aS7ExsId) {
    if (!aS7ExRepository.findById(aS7ExsId).isPresent()) return ResponseEntity.status(404).build();
    AS7Ex dto = aS7ExRepository.findById(aS7ExsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/aS7Exs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<AS7Ex>> getAllAS7Ex() {
    List<AS7Ex> allDtos = new ArrayList<>();
    for (AS7ExEntity e : aS7ExRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/aS7Exs/{aS7ExsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateAS7ExByValues(
      @PathVariable(name = "aS7ExsId") Integer aS7ExsId,
      @RequestParam(name = "aS7Exsname", required = false) String aS7Exsname,
      @RequestParam(name = "aS7Exsvalue", required = false) Integer aS7Exsvalue) {
    if (!aS7ExRepository.findById(aS7ExsId).isPresent()) return ResponseEntity.status(404).build();
    AS7ExEntity node = aS7ExRepository.findById(aS7ExsId).get();
    if (aS7Exsname != null) {
      node.setName(aS7Exsname);
    }
    if (aS7Exsvalue != null) {
      node.setValue(aS7Exsvalue);
    }
    // save the entity
    aS7ExRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/aS7Exs/{aS7ExsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteAS7Ex(@PathVariable(name = "aS7ExsId") Integer aS7ExsId) {
    // an entity with id aS7ExsId should exist
    if (!aS7ExRepository.findById(aS7ExsId).isPresent()) return ResponseEntity.status(404).build();
    aS7ExRepository.deleteById(aS7ExsId);
    return ResponseEntity.status(200).build();
  }
}
