package org.autogenerated.rest.artificial.cs.n5sparseshown.service;

import org.autogenerated.rest.artificial.cs.n5sparseshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparseshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class DioO1RestAPI {
  @Autowired private DioO1Repository dioO1Repository;

  @RequestMapping(
      value = "/dioO1s",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createDioO1(@RequestBody DioO1 dioO1) {
    // an entity with id dioO1.id should not exist
    if (dioO1Repository.findById(dioO1.id).isPresent()) return ResponseEntity.status(400).build();
    DioO1Entity node = new DioO1Entity();
    node.setId(dioO1.id);
    node.setName(dioO1.name);
    node.setValue(dioO1.value);
    // save the entity
    dioO1Repository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/dioO1s/{dioO1sId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateDioO1(
      @PathVariable(name = "dioO1sId") Integer dioO1sId, @RequestBody DioO1 dioO1) {
    dioO1.id = dioO1sId;
    DioO1Entity node = null;
    if (dioO1Repository.findById(dioO1.id).isPresent())
      node = dioO1Repository.findById(dioO1.id).get();
    else {
      node = new DioO1Entity();
      node.setId(dioO1.id);
    }
    node.setName(dioO1.name);
    node.setValue(dioO1.value);
    // save the entity
    dioO1Repository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/dioO1s/{dioO1sId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<DioO1> getDioO1ById(@PathVariable(name = "dioO1sId") Integer dioO1sId) {
    if (!dioO1Repository.findById(dioO1sId).isPresent()) return ResponseEntity.status(404).build();
    DioO1 dto = dioO1Repository.findById(dioO1sId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/dioO1s",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<DioO1>> getAllDioO1() {
    List<DioO1> allDtos = new ArrayList<>();
    for (DioO1Entity e : dioO1Repository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/dioO1s/{dioO1sId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateDioO1ByValues(
      @PathVariable(name = "dioO1sId") Integer dioO1sId,
      @RequestParam(name = "dioO1sname", required = false) String dioO1sname,
      @RequestParam(name = "dioO1svalue", required = false) Integer dioO1svalue) {
    if (!dioO1Repository.findById(dioO1sId).isPresent()) return ResponseEntity.status(404).build();
    DioO1Entity node = dioO1Repository.findById(dioO1sId).get();
    if (dioO1sname != null) {
      node.setName(dioO1sname);
    }
    if (dioO1svalue != null) {
      node.setValue(dioO1svalue);
    }
    // save the entity
    dioO1Repository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/dioO1s/{dioO1sId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteDioO1(@PathVariable(name = "dioO1sId") Integer dioO1sId) {
    // an entity with id dioO1sId should exist
    if (!dioO1Repository.findById(dioO1sId).isPresent()) return ResponseEntity.status(404).build();
    dioO1Repository.deleteById(dioO1sId);
    return ResponseEntity.status(200).build();
  }
}
