package org.autogenerated.rest.artificial.cs.n5sparseshown.service;

import org.autogenerated.rest.artificial.cs.n5sparseshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparseshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class NDEjeRestAPI {
  @Autowired private NDEjeRepository nDEjeRepository;

  @RequestMapping(
      value = "/nDEjes",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createNDEje(@RequestBody NDEje nDEje) {
    // an entity with id nDEje.id should not exist
    if (nDEjeRepository.findById(nDEje.id).isPresent()) return ResponseEntity.status(400).build();
    NDEjeEntity node = new NDEjeEntity();
    node.setId(nDEje.id);
    node.setName(nDEje.name);
    node.setValue(nDEje.value);
    // save the entity
    nDEjeRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/nDEjes/{nDEjesId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateNDEje(
      @PathVariable(name = "nDEjesId") Integer nDEjesId, @RequestBody NDEje nDEje) {
    nDEje.id = nDEjesId;
    NDEjeEntity node = null;
    if (nDEjeRepository.findById(nDEje.id).isPresent())
      node = nDEjeRepository.findById(nDEje.id).get();
    else {
      node = new NDEjeEntity();
      node.setId(nDEje.id);
    }
    node.setName(nDEje.name);
    node.setValue(nDEje.value);
    // save the entity
    nDEjeRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/nDEjes/{nDEjesId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<NDEje> getNDEjeById(@PathVariable(name = "nDEjesId") Integer nDEjesId) {
    if (!nDEjeRepository.findById(nDEjesId).isPresent()) return ResponseEntity.status(404).build();
    NDEje dto = nDEjeRepository.findById(nDEjesId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/nDEjes",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<NDEje>> getAllNDEje() {
    List<NDEje> allDtos = new ArrayList<>();
    for (NDEjeEntity e : nDEjeRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/nDEjes/{nDEjesId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateNDEjeByValues(
      @PathVariable(name = "nDEjesId") Integer nDEjesId,
      @RequestParam(name = "nDEjesname", required = false) String nDEjesname,
      @RequestParam(name = "nDEjesvalue", required = false) Integer nDEjesvalue) {
    if (!nDEjeRepository.findById(nDEjesId).isPresent()) return ResponseEntity.status(404).build();
    NDEjeEntity node = nDEjeRepository.findById(nDEjesId).get();
    if (nDEjesname != null) {
      node.setName(nDEjesname);
    }
    if (nDEjesvalue != null) {
      node.setValue(nDEjesvalue);
    }
    // save the entity
    nDEjeRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/nDEjes/{nDEjesId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteNDEje(@PathVariable(name = "nDEjesId") Integer nDEjesId) {
    // an entity with id nDEjesId should exist
    if (!nDEjeRepository.findById(nDEjesId).isPresent()) return ResponseEntity.status(404).build();
    nDEjeRepository.deleteById(nDEjesId);
    return ResponseEntity.status(200).build();
  }
}
