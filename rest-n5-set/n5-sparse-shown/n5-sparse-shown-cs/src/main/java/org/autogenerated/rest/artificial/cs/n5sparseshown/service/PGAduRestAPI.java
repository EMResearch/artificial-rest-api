package org.autogenerated.rest.artificial.cs.n5sparseshown.service;

import org.autogenerated.rest.artificial.cs.n5sparseshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparseshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class PGAduRestAPI {
  @Autowired private PGAduRepository pGAduRepository;

  @RequestMapping(
      value = "/pGAdus",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createPGAdu(@RequestBody PGAdu pGAdu) {
    // an entity with id pGAdu.id should not exist
    if (pGAduRepository.findById(pGAdu.id).isPresent()) return ResponseEntity.status(400).build();
    PGAduEntity node = new PGAduEntity();
    node.setId(pGAdu.id);
    node.setName(pGAdu.name);
    node.setValue(pGAdu.value);
    // save the entity
    pGAduRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/pGAdus/{pGAdusId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdatePGAdu(
      @PathVariable(name = "pGAdusId") Integer pGAdusId, @RequestBody PGAdu pGAdu) {
    pGAdu.id = pGAdusId;
    PGAduEntity node = null;
    if (pGAduRepository.findById(pGAdu.id).isPresent())
      node = pGAduRepository.findById(pGAdu.id).get();
    else {
      node = new PGAduEntity();
      node.setId(pGAdu.id);
    }
    node.setName(pGAdu.name);
    node.setValue(pGAdu.value);
    // save the entity
    pGAduRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/pGAdus/{pGAdusId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<PGAdu> getPGAduById(@PathVariable(name = "pGAdusId") Integer pGAdusId) {
    if (!pGAduRepository.findById(pGAdusId).isPresent()) return ResponseEntity.status(404).build();
    PGAdu dto = pGAduRepository.findById(pGAdusId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/pGAdus",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<PGAdu>> getAllPGAdu() {
    List<PGAdu> allDtos = new ArrayList<>();
    for (PGAduEntity e : pGAduRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/pGAdus/{pGAdusId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updatePGAduByValues(
      @PathVariable(name = "pGAdusId") Integer pGAdusId,
      @RequestParam(name = "pGAdusname", required = false) String pGAdusname,
      @RequestParam(name = "pGAdusvalue", required = false) Integer pGAdusvalue) {
    if (!pGAduRepository.findById(pGAdusId).isPresent()) return ResponseEntity.status(404).build();
    PGAduEntity node = pGAduRepository.findById(pGAdusId).get();
    if (pGAdusname != null) {
      node.setName(pGAdusname);
    }
    if (pGAdusvalue != null) {
      node.setValue(pGAdusvalue);
    }
    // save the entity
    pGAduRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/pGAdus/{pGAdusId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deletePGAdu(@PathVariable(name = "pGAdusId") Integer pGAdusId) {
    // an entity with id pGAdusId should exist
    if (!pGAduRepository.findById(pGAdusId).isPresent()) return ResponseEntity.status(404).build();
    pGAduRepository.deleteById(pGAdusId);
    return ResponseEntity.status(200).build();
  }
}
