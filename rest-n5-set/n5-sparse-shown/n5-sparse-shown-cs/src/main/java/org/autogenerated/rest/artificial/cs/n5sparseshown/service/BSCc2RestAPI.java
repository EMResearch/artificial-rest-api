package org.autogenerated.rest.artificial.cs.n5sparseshown.service;

import org.autogenerated.rest.artificial.cs.n5sparseshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparseshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class BSCc2RestAPI {
  @Autowired private BSCc2Repository bSCc2Repository;

  @RequestMapping(
      value = "/bSCc2s",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createBSCc2(@RequestBody BSCc2 bSCc2) {
    // an entity with id bSCc2.id should not exist
    if (bSCc2Repository.findById(bSCc2.id).isPresent()) return ResponseEntity.status(400).build();
    BSCc2Entity node = new BSCc2Entity();
    node.setId(bSCc2.id);
    node.setName(bSCc2.name);
    node.setValue(bSCc2.value);
    // save the entity
    bSCc2Repository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/bSCc2s/{bSCc2sId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateBSCc2(
      @PathVariable(name = "bSCc2sId") Integer bSCc2sId, @RequestBody BSCc2 bSCc2) {
    bSCc2.id = bSCc2sId;
    BSCc2Entity node = null;
    if (bSCc2Repository.findById(bSCc2.id).isPresent())
      node = bSCc2Repository.findById(bSCc2.id).get();
    else {
      node = new BSCc2Entity();
      node.setId(bSCc2.id);
    }
    node.setName(bSCc2.name);
    node.setValue(bSCc2.value);
    // save the entity
    bSCc2Repository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/bSCc2s/{bSCc2sId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<BSCc2> getBSCc2ById(@PathVariable(name = "bSCc2sId") Integer bSCc2sId) {
    if (!bSCc2Repository.findById(bSCc2sId).isPresent()) return ResponseEntity.status(404).build();
    BSCc2 dto = bSCc2Repository.findById(bSCc2sId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/bSCc2s",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<BSCc2>> getAllBSCc2() {
    List<BSCc2> allDtos = new ArrayList<>();
    for (BSCc2Entity e : bSCc2Repository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/bSCc2s/{bSCc2sId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateBSCc2ByValues(
      @PathVariable(name = "bSCc2sId") Integer bSCc2sId,
      @RequestParam(name = "bSCc2sname", required = false) String bSCc2sname,
      @RequestParam(name = "bSCc2svalue", required = false) Integer bSCc2svalue) {
    if (!bSCc2Repository.findById(bSCc2sId).isPresent()) return ResponseEntity.status(404).build();
    BSCc2Entity node = bSCc2Repository.findById(bSCc2sId).get();
    if (bSCc2sname != null) {
      node.setName(bSCc2sname);
    }
    if (bSCc2svalue != null) {
      node.setValue(bSCc2svalue);
    }
    // save the entity
    bSCc2Repository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/bSCc2s/{bSCc2sId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteBSCc2(@PathVariable(name = "bSCc2sId") Integer bSCc2sId) {
    // an entity with id bSCc2sId should exist
    if (!bSCc2Repository.findById(bSCc2sId).isPresent()) return ResponseEntity.status(404).build();
    bSCc2Repository.deleteById(bSCc2sId);
    return ResponseEntity.status(200).build();
  }
}
