package org.autogenerated.rest.artificial.cs.n5sparsehide.service;

import org.autogenerated.rest.artificial.cs.n5sparsehide.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparsehide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class VrS4RRestAPI {
  @Autowired private VrS4RRepository vrS4RRepository;

  @RequestMapping(
      value = "/vrS4Rs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createVrS4R(@RequestBody VrS4R vrS4R) {
    // an entity with id vrS4R.id should not exist
    if (vrS4RRepository.findById(vrS4R.id).isPresent()) return ResponseEntity.status(400).build();
    VrS4REntity node = new VrS4REntity();
    node.setId(vrS4R.id);
    node.setName(vrS4R.name);
    node.setValue(vrS4R.value);
    // save the entity
    vrS4RRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/vrS4Rs/{vrS4RsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateVrS4R(
      @PathVariable(name = "vrS4RsId") Integer vrS4RsId, @RequestBody VrS4R vrS4R) {
    vrS4R.id = vrS4RsId;
    VrS4REntity node = null;
    if (vrS4RRepository.findById(vrS4R.id).isPresent())
      node = vrS4RRepository.findById(vrS4R.id).get();
    else {
      node = new VrS4REntity();
      node.setId(vrS4R.id);
    }
    node.setName(vrS4R.name);
    node.setValue(vrS4R.value);
    // save the entity
    vrS4RRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/vrS4Rs/{vrS4RsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<VrS4R> getVrS4RById(@PathVariable(name = "vrS4RsId") Integer vrS4RsId) {
    if (!vrS4RRepository.findById(vrS4RsId).isPresent()) return ResponseEntity.status(404).build();
    VrS4R dto = vrS4RRepository.findById(vrS4RsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/vrS4Rs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<VrS4R>> getAllVrS4R() {
    List<VrS4R> allDtos = new ArrayList<>();
    for (VrS4REntity e : vrS4RRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/vrS4Rs/{vrS4RsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateVrS4RByValues(
      @PathVariable(name = "vrS4RsId") Integer vrS4RsId,
      @RequestParam(name = "vrS4Rsname", required = false) String vrS4Rsname,
      @RequestParam(name = "vrS4Rsvalue", required = false) Integer vrS4Rsvalue) {
    if (!vrS4RRepository.findById(vrS4RsId).isPresent()) return ResponseEntity.status(404).build();
    VrS4REntity node = vrS4RRepository.findById(vrS4RsId).get();
    if (vrS4Rsname != null) {
      node.setName(vrS4Rsname);
    }
    if (vrS4Rsvalue != null) {
      node.setValue(vrS4Rsvalue);
    }
    // save the entity
    vrS4RRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/vrS4Rs/{vrS4RsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteVrS4R(@PathVariable(name = "vrS4RsId") Integer vrS4RsId) {
    // an entity with id vrS4RsId should exist
    if (!vrS4RRepository.findById(vrS4RsId).isPresent()) return ResponseEntity.status(404).build();
    vrS4RRepository.deleteById(vrS4RsId);
    return ResponseEntity.status(200).build();
  }
}
