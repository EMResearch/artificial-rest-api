package org.autogenerated.rest.artificial.cs.n5sparsehide.service;

import org.autogenerated.rest.artificial.cs.n5sparsehide.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparsehide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class X7QeyRestAPI {
  @Autowired private X7QeyRepository x7QeyRepository;

  @RequestMapping(
      value = "/x7Qeys",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createX7Qey(@RequestBody X7Qey x7Qey) {
    // an entity with id x7Qey.id should not exist
    if (x7QeyRepository.findById(x7Qey.id).isPresent()) return ResponseEntity.status(400).build();
    X7QeyEntity node = new X7QeyEntity();
    node.setId(x7Qey.id);
    node.setName(x7Qey.name);
    node.setValue(x7Qey.value);
    // save the entity
    x7QeyRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/x7Qeys/{x7QeysId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateX7Qey(
      @PathVariable(name = "x7QeysId") Integer x7QeysId, @RequestBody X7Qey x7Qey) {
    x7Qey.id = x7QeysId;
    X7QeyEntity node = null;
    if (x7QeyRepository.findById(x7Qey.id).isPresent())
      node = x7QeyRepository.findById(x7Qey.id).get();
    else {
      node = new X7QeyEntity();
      node.setId(x7Qey.id);
    }
    node.setName(x7Qey.name);
    node.setValue(x7Qey.value);
    // save the entity
    x7QeyRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/x7Qeys/{x7QeysId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<X7Qey> getX7QeyById(@PathVariable(name = "x7QeysId") Integer x7QeysId) {
    if (!x7QeyRepository.findById(x7QeysId).isPresent()) return ResponseEntity.status(404).build();
    X7Qey dto = x7QeyRepository.findById(x7QeysId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/x7Qeys",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<X7Qey>> getAllX7Qey() {
    List<X7Qey> allDtos = new ArrayList<>();
    for (X7QeyEntity e : x7QeyRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/x7Qeys/{x7QeysId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateX7QeyByValues(
      @PathVariable(name = "x7QeysId") Integer x7QeysId,
      @RequestParam(name = "x7Qeysname", required = false) String x7Qeysname,
      @RequestParam(name = "x7Qeysvalue", required = false) Integer x7Qeysvalue) {
    if (!x7QeyRepository.findById(x7QeysId).isPresent()) return ResponseEntity.status(404).build();
    X7QeyEntity node = x7QeyRepository.findById(x7QeysId).get();
    if (x7Qeysname != null) {
      node.setName(x7Qeysname);
    }
    if (x7Qeysvalue != null) {
      node.setValue(x7Qeysvalue);
    }
    // save the entity
    x7QeyRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/x7Qeys/{x7QeysId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteX7Qey(@PathVariable(name = "x7QeysId") Integer x7QeysId) {
    // an entity with id x7QeysId should exist
    if (!x7QeyRepository.findById(x7QeysId).isPresent()) return ResponseEntity.status(404).build();
    x7QeyRepository.deleteById(x7QeysId);
    return ResponseEntity.status(200).build();
  }
}
