package org.autogenerated.rest.artificial.cs.n5sparsehide.service;

import org.autogenerated.rest.artificial.cs.n5sparsehide.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparsehide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class M4KNgRestAPI {
  @Autowired private M4KNgRepository m4KNgRepository;
  @Autowired private PtjWCRepository ptjWCRepository;

  @RequestMapping(
      value = "/m4KNgs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createM4KNg(@RequestBody M4KNg m4KNg) {
    // an entity with id m4KNg.id should not exist
    if (m4KNgRepository.findById(m4KNg.id).isPresent()) return ResponseEntity.status(400).build();
    M4KNgEntity node = new M4KNgEntity();
    node.setId(m4KNg.id);
    // refer to related entity
    if (!ptjWCRepository.findById(m4KNg.ptjWCId).isPresent())
      return ResponseEntity.status(404).build();
    PtjWCEntity referVarToPtjWCEntity = ptjWCRepository.findById(m4KNg.ptjWCId).get();
    node.setPtjWC(referVarToPtjWCEntity);
    node.setName(m4KNg.name);
    node.setValue(m4KNg.value);
    // save the entity
    m4KNgRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/m4KNgs/{m4KNgsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateM4KNg(
      @PathVariable(name = "m4KNgsId") Integer m4KNgsId, @RequestBody M4KNg m4KNg) {
    m4KNg.id = m4KNgsId;
    M4KNgEntity node = null;
    if (m4KNgRepository.findById(m4KNg.id).isPresent())
      node = m4KNgRepository.findById(m4KNg.id).get();
    else {
      node = new M4KNgEntity();
      node.setId(m4KNg.id);
    }
    // refer to related entity
    if (!ptjWCRepository.findById(m4KNg.ptjWCId).isPresent())
      return ResponseEntity.status(404).build();
    PtjWCEntity referVarToPtjWCEntity = ptjWCRepository.findById(m4KNg.ptjWCId).get();
    node.setPtjWC(referVarToPtjWCEntity);
    node.setName(m4KNg.name);
    node.setValue(m4KNg.value);
    // save the entity
    m4KNgRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/m4KNgs/{m4KNgsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<M4KNg> getM4KNgById(@PathVariable(name = "m4KNgsId") Integer m4KNgsId) {
    if (!m4KNgRepository.findById(m4KNgsId).isPresent()) return ResponseEntity.status(404).build();
    M4KNg dto = m4KNgRepository.findById(m4KNgsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/m4KNgs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<M4KNg>> getAllM4KNg() {
    List<M4KNg> allDtos = new ArrayList<>();
    for (M4KNgEntity e : m4KNgRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/m4KNgs/{m4KNgsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateM4KNgByValues(
      @PathVariable(name = "m4KNgsId") Integer m4KNgsId,
      @RequestParam(name = "m4KNgsname", required = false) String m4KNgsname,
      @RequestParam(name = "m4KNgsvalue", required = false) Integer m4KNgsvalue,
      @RequestParam(name = "ptjWCId", required = false) Integer ptjWCId) {
    if (!m4KNgRepository.findById(m4KNgsId).isPresent()) return ResponseEntity.status(404).build();
    M4KNgEntity node = m4KNgRepository.findById(m4KNgsId).get();
    // refer to related entity
    PtjWCEntity referVarToPtjWCEntity = null;
    if (ptjWCId != null) {
      if (!ptjWCRepository.findById(ptjWCId).isPresent()) return ResponseEntity.status(400).build();
      referVarToPtjWCEntity = ptjWCRepository.findById(ptjWCId).get();
      node.setPtjWC(referVarToPtjWCEntity);
    } else {
      referVarToPtjWCEntity = node.getPtjWC();
    }
    if (m4KNgsname != null) {
      node.setName(m4KNgsname);
    }
    if (m4KNgsvalue != null) {
      node.setValue(m4KNgsvalue);
    }
    // save the entity
    m4KNgRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/m4KNgs/{m4KNgsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteM4KNg(@PathVariable(name = "m4KNgsId") Integer m4KNgsId) {
    // an entity with id m4KNgsId should exist
    if (!m4KNgRepository.findById(m4KNgsId).isPresent()) return ResponseEntity.status(404).build();
    m4KNgRepository.deleteById(m4KNgsId);
    return ResponseEntity.status(200).build();
  }
}
