package org.autogenerated.rest.artificial.cs.n5sparsehide.service;

import org.autogenerated.rest.artificial.cs.n5sparsehide.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparsehide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class JjhK5RestAPI {
  @Autowired private JjhK5Repository jjhK5Repository;

  @RequestMapping(
      value = "/jjhK5s",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createJjhK5(@RequestBody JjhK5 jjhK5) {
    // an entity with id jjhK5.id should not exist
    if (jjhK5Repository.findById(jjhK5.id).isPresent()) return ResponseEntity.status(400).build();
    JjhK5Entity node = new JjhK5Entity();
    node.setId(jjhK5.id);
    node.setName(jjhK5.name);
    node.setValue(jjhK5.value);
    // save the entity
    jjhK5Repository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/jjhK5s/{jjhK5sId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateJjhK5(
      @PathVariable(name = "jjhK5sId") Integer jjhK5sId, @RequestBody JjhK5 jjhK5) {
    jjhK5.id = jjhK5sId;
    JjhK5Entity node = null;
    if (jjhK5Repository.findById(jjhK5.id).isPresent())
      node = jjhK5Repository.findById(jjhK5.id).get();
    else {
      node = new JjhK5Entity();
      node.setId(jjhK5.id);
    }
    node.setName(jjhK5.name);
    node.setValue(jjhK5.value);
    // save the entity
    jjhK5Repository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/jjhK5s/{jjhK5sId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<JjhK5> getJjhK5ById(@PathVariable(name = "jjhK5sId") Integer jjhK5sId) {
    if (!jjhK5Repository.findById(jjhK5sId).isPresent()) return ResponseEntity.status(404).build();
    JjhK5 dto = jjhK5Repository.findById(jjhK5sId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/jjhK5s",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<JjhK5>> getAllJjhK5() {
    List<JjhK5> allDtos = new ArrayList<>();
    for (JjhK5Entity e : jjhK5Repository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/jjhK5s/{jjhK5sId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateJjhK5ByValues(
      @PathVariable(name = "jjhK5sId") Integer jjhK5sId,
      @RequestParam(name = "jjhK5sname", required = false) String jjhK5sname,
      @RequestParam(name = "jjhK5svalue", required = false) Integer jjhK5svalue) {
    if (!jjhK5Repository.findById(jjhK5sId).isPresent()) return ResponseEntity.status(404).build();
    JjhK5Entity node = jjhK5Repository.findById(jjhK5sId).get();
    if (jjhK5sname != null) {
      node.setName(jjhK5sname);
    }
    if (jjhK5svalue != null) {
      node.setValue(jjhK5svalue);
    }
    // save the entity
    jjhK5Repository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/jjhK5s/{jjhK5sId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteJjhK5(@PathVariable(name = "jjhK5sId") Integer jjhK5sId) {
    // an entity with id jjhK5sId should exist
    if (!jjhK5Repository.findById(jjhK5sId).isPresent()) return ResponseEntity.status(404).build();
    jjhK5Repository.deleteById(jjhK5sId);
    return ResponseEntity.status(200).build();
  }
}
