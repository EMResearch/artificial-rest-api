package org.autogenerated.rest.artificial.cs.n5mediumshown.service;

import org.autogenerated.rest.artificial.cs.n5mediumshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class RoGagRestAPI {
  @Autowired private RoGagRepository roGagRepository;
  @Autowired private WdL1QRepository wdL1QRepository;

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QId}/roGags",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createRoGag(
      @RequestBody RoGag roGag,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId,
      @PathVariable(name = "wdL1QId") Integer wdL1QId) {
    // an entity with id roGag.id should not exist
    if (roGagRepository.findById(roGag.id).isPresent()) return ResponseEntity.status(400).build();
    RoGagEntity node = new RoGagEntity();
    node.setId(roGag.id);
    // refer to related entity
    if (!wdL1QRepository.findById(roGag.wdL1QId).isPresent())
      return ResponseEntity.status(404).build();
    WdL1QEntity referVarToWdL1QEntity = wdL1QRepository.findById(roGag.wdL1QId).get();
    node.setWdL1Q(referVarToWdL1QEntity);
    node.setName(roGag.name);
    node.setValue(roGag.value);
    // save the entity
    roGagRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QId}/roGags/{roGagsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateRoGag(
      @PathVariable(name = "roGagsId") Integer roGagsId,
      @RequestBody RoGag roGag,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId,
      @PathVariable(name = "wdL1QId") Integer wdL1QId) {
    roGag.id = roGagsId;
    RoGagEntity node = null;
    if (roGagRepository.findById(roGag.id).isPresent())
      node = roGagRepository.findById(roGag.id).get();
    else {
      node = new RoGagEntity();
      node.setId(roGag.id);
    }
    // refer to related entity
    if (!wdL1QRepository.findById(roGag.wdL1QId).isPresent())
      return ResponseEntity.status(404).build();
    WdL1QEntity referVarToWdL1QEntity = wdL1QRepository.findById(roGag.wdL1QId).get();
    node.setWdL1Q(referVarToWdL1QEntity);
    node.setName(roGag.name);
    node.setValue(roGag.value);
    // save the entity
    roGagRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QId}/roGags/{roGagsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<RoGag> getRoGagById(
      @PathVariable(name = "roGagsId") Integer roGagsId,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId,
      @PathVariable(name = "wdL1QId") Integer wdL1QId) {
    if (!roGagRepository.findById(roGagsId).isPresent()) return ResponseEntity.status(404).build();
    RoGag dto = roGagRepository.findById(roGagsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QId}/roGags",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<RoGag>> getAllWithConditionRoGag(
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId,
      @PathVariable(name = "wdL1QId") Integer wdL1QId) {
    List<RoGag> allDtos = new ArrayList<>();
    for (RoGagEntity e : roGagRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QId}/roGags/{roGagsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateRoGagByValues(
      @PathVariable(name = "roGagsId") Integer roGagsId,
      @RequestParam(name = "roGagsname", required = false) String roGagsname,
      @RequestParam(name = "roGagsvalue", required = false) Integer roGagsvalue,
      @PathVariable(name = "wdL1QId") Integer wdL1QId,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId) {
    if (!roGagRepository.findById(roGagsId).isPresent()) return ResponseEntity.status(404).build();
    RoGagEntity node = roGagRepository.findById(roGagsId).get();
    // refer to related entity
    WdL1QEntity referVarToWdL1QEntity = null;
    if (wdL1QId != null) {
      if (!wdL1QRepository.findById(wdL1QId).isPresent()) return ResponseEntity.status(400).build();
      referVarToWdL1QEntity = wdL1QRepository.findById(wdL1QId).get();
      node.setWdL1Q(referVarToWdL1QEntity);
    } else {
      referVarToWdL1QEntity = node.getWdL1Q();
    }
    if (roGagsname != null) {
      node.setName(roGagsname);
    }
    if (roGagsvalue != null) {
      node.setValue(roGagsvalue);
    }
    // save the entity
    roGagRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QId}/roGags/{roGagsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteWithConditionRoGag(
      @PathVariable(name = "roGagsId") Integer roGagsId,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId,
      @PathVariable(name = "wdL1QId") Integer wdL1QId) {
    // an entity with id roGagsId should exist
    if (!roGagRepository.findById(roGagsId).isPresent()) return ResponseEntity.status(404).build();
    roGagRepository.deleteById(roGagsId);
    return ResponseEntity.status(200).build();
  }
}
