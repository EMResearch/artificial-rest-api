package org.autogenerated.rest.artificial.cs.n5mediumshown.service;

import org.autogenerated.rest.artificial.cs.n5mediumshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class WdL1QRestAPI {
  @Autowired private WdL1QRepository wdL1QRepository;
  @Autowired private LIM1ZRepository lIM1ZRepository;

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createWdL1Q(
      @RequestBody WdL1Q wdL1Q, @PathVariable(name = "lIM1ZId") Integer lIM1ZId) {
    // an entity with id wdL1Q.id should not exist
    if (wdL1QRepository.findById(wdL1Q.id).isPresent()) return ResponseEntity.status(400).build();
    WdL1QEntity node = new WdL1QEntity();
    node.setId(wdL1Q.id);
    // refer to related entity
    if (!lIM1ZRepository.findById(wdL1Q.lIM1ZId).isPresent())
      return ResponseEntity.status(404).build();
    LIM1ZEntity referVarToLIM1ZEntity = lIM1ZRepository.findById(wdL1Q.lIM1ZId).get();
    node.setLIM1Z(referVarToLIM1ZEntity);
    node.setName(wdL1Q.name);
    node.setValue(wdL1Q.value);
    // save the entity
    wdL1QRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateWdL1Q(
      @PathVariable(name = "wdL1QsId") Integer wdL1QsId,
      @RequestBody WdL1Q wdL1Q,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId) {
    wdL1Q.id = wdL1QsId;
    WdL1QEntity node = null;
    if (wdL1QRepository.findById(wdL1Q.id).isPresent())
      node = wdL1QRepository.findById(wdL1Q.id).get();
    else {
      node = new WdL1QEntity();
      node.setId(wdL1Q.id);
    }
    // refer to related entity
    if (!lIM1ZRepository.findById(wdL1Q.lIM1ZId).isPresent())
      return ResponseEntity.status(404).build();
    LIM1ZEntity referVarToLIM1ZEntity = lIM1ZRepository.findById(wdL1Q.lIM1ZId).get();
    node.setLIM1Z(referVarToLIM1ZEntity);
    node.setName(wdL1Q.name);
    node.setValue(wdL1Q.value);
    // save the entity
    wdL1QRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<WdL1Q> getWdL1QById(
      @PathVariable(name = "wdL1QsId") Integer wdL1QsId,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId) {
    if (!wdL1QRepository.findById(wdL1QsId).isPresent()) return ResponseEntity.status(404).build();
    WdL1Q dto = wdL1QRepository.findById(wdL1QsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<WdL1Q>> getAllWithConditionWdL1Q(
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId) {
    List<WdL1Q> allDtos = new ArrayList<>();
    for (WdL1QEntity e : wdL1QRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateWdL1QByValues(
      @PathVariable(name = "wdL1QsId") Integer wdL1QsId,
      @RequestParam(name = "wdL1Qsname", required = false) String wdL1Qsname,
      @RequestParam(name = "wdL1Qsvalue", required = false) Integer wdL1Qsvalue,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId) {
    if (!wdL1QRepository.findById(wdL1QsId).isPresent()) return ResponseEntity.status(404).build();
    WdL1QEntity node = wdL1QRepository.findById(wdL1QsId).get();
    // refer to related entity
    LIM1ZEntity referVarToLIM1ZEntity = null;
    if (lIM1ZId != null) {
      if (!lIM1ZRepository.findById(lIM1ZId).isPresent()) return ResponseEntity.status(400).build();
      referVarToLIM1ZEntity = lIM1ZRepository.findById(lIM1ZId).get();
      node.setLIM1Z(referVarToLIM1ZEntity);
    } else {
      referVarToLIM1ZEntity = node.getLIM1Z();
    }
    if (wdL1Qsname != null) {
      node.setName(wdL1Qsname);
    }
    if (wdL1Qsvalue != null) {
      node.setValue(wdL1Qsvalue);
    }
    // save the entity
    wdL1QRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteWithConditionWdL1Q(
      @PathVariable(name = "wdL1QsId") Integer wdL1QsId,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId) {
    // an entity with id wdL1QsId should exist
    if (!wdL1QRepository.findById(wdL1QsId).isPresent()) return ResponseEntity.status(404).build();
    wdL1QRepository.deleteById(wdL1QsId);
    return ResponseEntity.status(200).build();
  }
}
