package org.autogenerated.rest.artificial.cs.n5mediumshown.service;

import org.autogenerated.rest.artificial.cs.n5mediumshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class CcE0aRestAPI {
  @Autowired private CcE0aRepository ccE0aRepository;
  @Autowired private RoGagRepository roGagRepository;

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QId}/roGags/{roGagId}/ccE0as",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createCcE0a(
      @RequestBody CcE0a ccE0a,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId,
      @PathVariable(name = "roGagId") Integer roGagId,
      @PathVariable(name = "wdL1QId") Integer wdL1QId) {
    // an entity with id ccE0a.id should not exist
    if (ccE0aRepository.findById(ccE0a.id).isPresent()) return ResponseEntity.status(400).build();
    CcE0aEntity node = new CcE0aEntity();
    node.setId(ccE0a.id);
    // refer to related entity
    if (!roGagRepository.findById(ccE0a.roGagId).isPresent())
      return ResponseEntity.status(404).build();
    RoGagEntity referVarToRoGagEntity = roGagRepository.findById(ccE0a.roGagId).get();
    node.setRoGag(referVarToRoGagEntity);
    node.setName(ccE0a.name);
    node.setValue(ccE0a.value);
    // save the entity
    ccE0aRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QId}/roGags/{roGagId}/ccE0as/{ccE0asId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateCcE0a(
      @PathVariable(name = "ccE0asId") Integer ccE0asId,
      @RequestBody CcE0a ccE0a,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId,
      @PathVariable(name = "roGagId") Integer roGagId,
      @PathVariable(name = "wdL1QId") Integer wdL1QId) {
    ccE0a.id = ccE0asId;
    CcE0aEntity node = null;
    if (ccE0aRepository.findById(ccE0a.id).isPresent())
      node = ccE0aRepository.findById(ccE0a.id).get();
    else {
      node = new CcE0aEntity();
      node.setId(ccE0a.id);
    }
    // refer to related entity
    if (!roGagRepository.findById(ccE0a.roGagId).isPresent())
      return ResponseEntity.status(404).build();
    RoGagEntity referVarToRoGagEntity = roGagRepository.findById(ccE0a.roGagId).get();
    node.setRoGag(referVarToRoGagEntity);
    node.setName(ccE0a.name);
    node.setValue(ccE0a.value);
    // save the entity
    ccE0aRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QId}/roGags/{roGagId}/ccE0as/{ccE0asId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<CcE0a> getCcE0aById(
      @PathVariable(name = "ccE0asId") Integer ccE0asId,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId,
      @PathVariable(name = "roGagId") Integer roGagId,
      @PathVariable(name = "wdL1QId") Integer wdL1QId) {
    if (!ccE0aRepository.findById(ccE0asId).isPresent()) return ResponseEntity.status(404).build();
    CcE0a dto = ccE0aRepository.findById(ccE0asId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QId}/roGags/{roGagId}/ccE0as",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<CcE0a>> getAllWithConditionCcE0a(
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId,
      @PathVariable(name = "roGagId") Integer roGagId,
      @PathVariable(name = "wdL1QId") Integer wdL1QId) {
    List<CcE0a> allDtos = new ArrayList<>();
    for (CcE0aEntity e : ccE0aRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QId}/roGags/{roGagId}/ccE0as/{ccE0asId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateCcE0aByValues(
      @PathVariable(name = "ccE0asId") Integer ccE0asId,
      @RequestParam(name = "ccE0asname", required = false) String ccE0asname,
      @RequestParam(name = "ccE0asvalue", required = false) Integer ccE0asvalue,
      @PathVariable(name = "roGagId") Integer roGagId,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId,
      @PathVariable(name = "wdL1QId") Integer wdL1QId) {
    if (!ccE0aRepository.findById(ccE0asId).isPresent()) return ResponseEntity.status(404).build();
    CcE0aEntity node = ccE0aRepository.findById(ccE0asId).get();
    // refer to related entity
    RoGagEntity referVarToRoGagEntity = null;
    if (roGagId != null) {
      if (!roGagRepository.findById(roGagId).isPresent()) return ResponseEntity.status(400).build();
      referVarToRoGagEntity = roGagRepository.findById(roGagId).get();
      node.setRoGag(referVarToRoGagEntity);
    } else {
      referVarToRoGagEntity = node.getRoGag();
    }
    if (ccE0asname != null) {
      node.setName(ccE0asname);
    }
    if (ccE0asvalue != null) {
      node.setValue(ccE0asvalue);
    }
    // save the entity
    ccE0aRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZId}/wdL1Qs/{wdL1QId}/roGags/{roGagId}/ccE0as/{ccE0asId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteWithConditionCcE0a(
      @PathVariable(name = "ccE0asId") Integer ccE0asId,
      @PathVariable(name = "lIM1ZId") Integer lIM1ZId,
      @PathVariable(name = "roGagId") Integer roGagId,
      @PathVariable(name = "wdL1QId") Integer wdL1QId) {
    // an entity with id ccE0asId should exist
    if (!ccE0aRepository.findById(ccE0asId).isPresent()) return ResponseEntity.status(404).build();
    ccE0aRepository.deleteById(ccE0asId);
    return ResponseEntity.status(200).build();
  }
}
