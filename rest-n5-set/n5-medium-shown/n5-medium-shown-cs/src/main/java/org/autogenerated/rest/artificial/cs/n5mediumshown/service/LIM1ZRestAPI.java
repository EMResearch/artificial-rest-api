package org.autogenerated.rest.artificial.cs.n5mediumshown.service;

import org.autogenerated.rest.artificial.cs.n5mediumshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class LIM1ZRestAPI {
  @Autowired private LIM1ZRepository lIM1ZRepository;

  @RequestMapping(
      value = "/lIM1Zs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createLIM1Z(@RequestBody LIM1Z lIM1Z) {
    // an entity with id lIM1Z.id should not exist
    if (lIM1ZRepository.findById(lIM1Z.id).isPresent()) return ResponseEntity.status(400).build();
    LIM1ZEntity node = new LIM1ZEntity();
    node.setId(lIM1Z.id);
    node.setName(lIM1Z.name);
    node.setValue(lIM1Z.value);
    // save the entity
    lIM1ZRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateLIM1Z(
      @PathVariable(name = "lIM1ZsId") Integer lIM1ZsId, @RequestBody LIM1Z lIM1Z) {
    lIM1Z.id = lIM1ZsId;
    LIM1ZEntity node = null;
    if (lIM1ZRepository.findById(lIM1Z.id).isPresent())
      node = lIM1ZRepository.findById(lIM1Z.id).get();
    else {
      node = new LIM1ZEntity();
      node.setId(lIM1Z.id);
    }
    node.setName(lIM1Z.name);
    node.setValue(lIM1Z.value);
    // save the entity
    lIM1ZRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<LIM1Z> getLIM1ZById(@PathVariable(name = "lIM1ZsId") Integer lIM1ZsId) {
    if (!lIM1ZRepository.findById(lIM1ZsId).isPresent()) return ResponseEntity.status(404).build();
    LIM1Z dto = lIM1ZRepository.findById(lIM1ZsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/lIM1Zs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<LIM1Z>> getAllLIM1Z() {
    List<LIM1Z> allDtos = new ArrayList<>();
    for (LIM1ZEntity e : lIM1ZRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateLIM1ZByValues(
      @PathVariable(name = "lIM1ZsId") Integer lIM1ZsId,
      @RequestParam(name = "lIM1Zsname", required = false) String lIM1Zsname,
      @RequestParam(name = "lIM1Zsvalue", required = false) Integer lIM1Zsvalue) {
    if (!lIM1ZRepository.findById(lIM1ZsId).isPresent()) return ResponseEntity.status(404).build();
    LIM1ZEntity node = lIM1ZRepository.findById(lIM1ZsId).get();
    if (lIM1Zsname != null) {
      node.setName(lIM1Zsname);
    }
    if (lIM1Zsvalue != null) {
      node.setValue(lIM1Zsvalue);
    }
    // save the entity
    lIM1ZRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/lIM1Zs/{lIM1ZsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteLIM1Z(@PathVariable(name = "lIM1ZsId") Integer lIM1ZsId) {
    // an entity with id lIM1ZsId should exist
    if (!lIM1ZRepository.findById(lIM1ZsId).isPresent()) return ResponseEntity.status(404).build();
    lIM1ZRepository.deleteById(lIM1ZsId);
    return ResponseEntity.status(200).build();
  }
}
