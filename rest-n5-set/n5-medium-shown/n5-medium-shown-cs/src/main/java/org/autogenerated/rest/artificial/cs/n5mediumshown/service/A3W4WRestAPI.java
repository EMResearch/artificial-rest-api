package org.autogenerated.rest.artificial.cs.n5mediumshown.service;

import org.autogenerated.rest.artificial.cs.n5mediumshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class A3W4WRestAPI {
  @Autowired private A3W4WRepository a3W4WRepository;

  @RequestMapping(
      value = "/a3W4Ws",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createA3W4W(@RequestBody A3W4W a3W4W) {
    // an entity with id a3W4W.id should not exist
    if (a3W4WRepository.findById(a3W4W.id).isPresent()) return ResponseEntity.status(400).build();
    A3W4WEntity node = new A3W4WEntity();
    node.setId(a3W4W.id);
    node.setName(a3W4W.name);
    node.setValue(a3W4W.value);
    // save the entity
    a3W4WRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/a3W4Ws/{a3W4WsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateA3W4W(
      @PathVariable(name = "a3W4WsId") Integer a3W4WsId, @RequestBody A3W4W a3W4W) {
    a3W4W.id = a3W4WsId;
    A3W4WEntity node = null;
    if (a3W4WRepository.findById(a3W4W.id).isPresent())
      node = a3W4WRepository.findById(a3W4W.id).get();
    else {
      node = new A3W4WEntity();
      node.setId(a3W4W.id);
    }
    node.setName(a3W4W.name);
    node.setValue(a3W4W.value);
    // save the entity
    a3W4WRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/a3W4Ws/{a3W4WsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<A3W4W> getA3W4WById(@PathVariable(name = "a3W4WsId") Integer a3W4WsId) {
    if (!a3W4WRepository.findById(a3W4WsId).isPresent()) return ResponseEntity.status(404).build();
    A3W4W dto = a3W4WRepository.findById(a3W4WsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/a3W4Ws",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<A3W4W>> getAllA3W4W() {
    List<A3W4W> allDtos = new ArrayList<>();
    for (A3W4WEntity e : a3W4WRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/a3W4Ws/{a3W4WsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateA3W4WByValues(
      @PathVariable(name = "a3W4WsId") Integer a3W4WsId,
      @RequestParam(name = "a3W4Wsname", required = false) String a3W4Wsname,
      @RequestParam(name = "a3W4Wsvalue", required = false) Integer a3W4Wsvalue) {
    if (!a3W4WRepository.findById(a3W4WsId).isPresent()) return ResponseEntity.status(404).build();
    A3W4WEntity node = a3W4WRepository.findById(a3W4WsId).get();
    if (a3W4Wsname != null) {
      node.setName(a3W4Wsname);
    }
    if (a3W4Wsvalue != null) {
      node.setValue(a3W4Wsvalue);
    }
    // save the entity
    a3W4WRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/a3W4Ws/{a3W4WsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteA3W4W(@PathVariable(name = "a3W4WsId") Integer a3W4WsId) {
    // an entity with id a3W4WsId should exist
    if (!a3W4WRepository.findById(a3W4WsId).isPresent()) return ResponseEntity.status(404).build();
    a3W4WRepository.deleteById(a3W4WsId);
    return ResponseEntity.status(200).build();
  }
}
