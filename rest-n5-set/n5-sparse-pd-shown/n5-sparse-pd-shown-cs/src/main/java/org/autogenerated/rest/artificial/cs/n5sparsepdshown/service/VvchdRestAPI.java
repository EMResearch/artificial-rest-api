package org.autogenerated.rest.artificial.cs.n5sparsepdshown.service;

import org.autogenerated.rest.artificial.cs.n5sparsepdshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparsepdshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class VvchdRestAPI {
  @Autowired private VvchdRepository vvchdRepository;
  @Autowired private Nf51XRepository nf51XRepository;

  @RequestMapping(
      value = "/nf51Xs/{nf51XId}/vvchds",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createVvchd(
      @RequestBody Vvchd vvchd, @PathVariable(name = "nf51XId") Integer nf51XId) {
    // an entity with id vvchd.id should not exist
    if (vvchdRepository.findById(vvchd.id).isPresent()) return ResponseEntity.status(400).build();
    VvchdEntity node = new VvchdEntity();
    node.setId(vvchd.id);
    // refer to related entity
    if (!nf51XRepository.findById(vvchd.nf51XId).isPresent())
      return ResponseEntity.status(404).build();
    Nf51XEntity referVarToNf51XEntity = nf51XRepository.findById(vvchd.nf51XId).get();
    node.setNf51X(referVarToNf51XEntity);
    node.setName(vvchd.name);
    node.setValue(vvchd.value);
    // additional codes for handling dependency
    if (!(node.getValue() == referVarToNf51XEntity.getValue()))
      return ResponseEntity.status(400).build();
    // save the entity
    vvchdRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/nf51Xs/{nf51XId}/vvchds/{vvchdsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateVvchd(
      @PathVariable(name = "vvchdsId") Integer vvchdsId,
      @RequestBody Vvchd vvchd,
      @PathVariable(name = "nf51XId") Integer nf51XId) {
    vvchd.id = vvchdsId;
    VvchdEntity node = null;
    if (vvchdRepository.findById(vvchd.id).isPresent())
      node = vvchdRepository.findById(vvchd.id).get();
    else {
      node = new VvchdEntity();
      node.setId(vvchd.id);
    }
    // refer to related entity
    if (!nf51XRepository.findById(vvchd.nf51XId).isPresent())
      return ResponseEntity.status(404).build();
    Nf51XEntity referVarToNf51XEntity = nf51XRepository.findById(vvchd.nf51XId).get();
    node.setNf51X(referVarToNf51XEntity);
    node.setName(vvchd.name);
    node.setValue(vvchd.value);
    // additional codes for handling dependency
    if (!(node.getValue() == referVarToNf51XEntity.getValue()))
      return ResponseEntity.status(400).build();
    // save the entity
    vvchdRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/nf51Xs/{nf51XId}/vvchds/{vvchdsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<Vvchd> getVvchdById(
      @PathVariable(name = "vvchdsId") Integer vvchdsId,
      @PathVariable(name = "nf51XId") Integer nf51XId) {
    if (!vvchdRepository.findById(vvchdsId).isPresent()) return ResponseEntity.status(404).build();
    Vvchd dto = vvchdRepository.findById(vvchdsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/nf51Xs/{nf51XId}/vvchds",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<Vvchd>> getAllWithConditionVvchd(
      @PathVariable(name = "nf51XId") Integer nf51XId) {
    List<Vvchd> allDtos = new ArrayList<>();
    for (VvchdEntity e : vvchdRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/nf51Xs/{nf51XId}/vvchds/{vvchdsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateVvchdByValues(
      @PathVariable(name = "vvchdsId") Integer vvchdsId,
      @RequestParam(name = "vvchdsname", required = false) String vvchdsname,
      @RequestParam(name = "vvchdsvalue", required = false) Integer vvchdsvalue,
      @PathVariable(name = "nf51XId") Integer nf51XId) {
    if (!vvchdRepository.findById(vvchdsId).isPresent()) return ResponseEntity.status(404).build();
    VvchdEntity node = vvchdRepository.findById(vvchdsId).get();
    // refer to related entity
    Nf51XEntity referVarToNf51XEntity = null;
    if (nf51XId != null) {
      if (!nf51XRepository.findById(nf51XId).isPresent()) return ResponseEntity.status(400).build();
      referVarToNf51XEntity = nf51XRepository.findById(nf51XId).get();
      node.setNf51X(referVarToNf51XEntity);
    } else {
      referVarToNf51XEntity = node.getNf51X();
    }
    if (vvchdsname != null) {
      node.setName(vvchdsname);
    }
    if (vvchdsvalue != null) {
      node.setValue(vvchdsvalue);
    }
    // additional codes for handling dependency
    if (!(node.getValue() == referVarToNf51XEntity.getValue()))
      return ResponseEntity.status(400).build();
    // save the entity
    vvchdRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/nf51Xs/{nf51XId}/vvchds/{vvchdsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteWithConditionVvchd(
      @PathVariable(name = "vvchdsId") Integer vvchdsId,
      @PathVariable(name = "nf51XId") Integer nf51XId) {
    // an entity with id vvchdsId should exist
    if (!vvchdRepository.findById(vvchdsId).isPresent()) return ResponseEntity.status(404).build();
    vvchdRepository.deleteById(vvchdsId);
    return ResponseEntity.status(200).build();
  }
}
