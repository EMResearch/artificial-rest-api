package org.autogenerated.rest.artificial.cs.n5sparsepdshown.service;

import org.autogenerated.rest.artificial.cs.n5sparsepdshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparsepdshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class Nf51XRestAPI {
  @Autowired private Nf51XRepository nf51XRepository;

  @RequestMapping(
      value = "/nf51Xs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createNf51X(@RequestBody Nf51X nf51X) {
    // an entity with id nf51X.id should not exist
    if (nf51XRepository.findById(nf51X.id).isPresent()) return ResponseEntity.status(400).build();
    Nf51XEntity node = new Nf51XEntity();
    node.setId(nf51X.id);
    node.setName(nf51X.name);
    node.setValue(nf51X.value);
    // save the entity
    nf51XRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/nf51Xs/{nf51XsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateNf51X(
      @PathVariable(name = "nf51XsId") Integer nf51XsId, @RequestBody Nf51X nf51X) {
    nf51X.id = nf51XsId;
    Nf51XEntity node = null;
    if (nf51XRepository.findById(nf51X.id).isPresent())
      node = nf51XRepository.findById(nf51X.id).get();
    else {
      node = new Nf51XEntity();
      node.setId(nf51X.id);
    }
    node.setName(nf51X.name);
    node.setValue(nf51X.value);
    // save the entity
    nf51XRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/nf51Xs/{nf51XsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<Nf51X> getNf51XById(@PathVariable(name = "nf51XsId") Integer nf51XsId) {
    if (!nf51XRepository.findById(nf51XsId).isPresent()) return ResponseEntity.status(404).build();
    Nf51X dto = nf51XRepository.findById(nf51XsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/nf51Xs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<Nf51X>> getAllNf51X() {
    List<Nf51X> allDtos = new ArrayList<>();
    for (Nf51XEntity e : nf51XRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/nf51Xs/{nf51XsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateNf51XByValues(
      @PathVariable(name = "nf51XsId") Integer nf51XsId,
      @RequestParam(name = "nf51Xsname", required = false) String nf51Xsname,
      @RequestParam(name = "nf51Xsvalue", required = false) Integer nf51Xsvalue) {
    if (!nf51XRepository.findById(nf51XsId).isPresent()) return ResponseEntity.status(404).build();
    Nf51XEntity node = nf51XRepository.findById(nf51XsId).get();
    if (nf51Xsname != null) {
      node.setName(nf51Xsname);
    }
    if (nf51Xsvalue != null) {
      node.setValue(nf51Xsvalue);
    }
    // save the entity
    nf51XRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/nf51Xs/{nf51XsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteNf51X(@PathVariable(name = "nf51XsId") Integer nf51XsId) {
    // an entity with id nf51XsId should exist
    if (!nf51XRepository.findById(nf51XsId).isPresent()) return ResponseEntity.status(404).build();
    nf51XRepository.deleteById(nf51XsId);
    return ResponseEntity.status(200).build();
  }
}
