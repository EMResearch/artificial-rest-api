package org.autogenerated.rest.artificial.cs.n5sparsepdshown.service;

import org.autogenerated.rest.artificial.cs.n5sparsepdshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5sparsepdshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class RtDcWRestAPI {
  @Autowired private RtDcWRepository rtDcWRepository;

  @RequestMapping(
      value = "/rtDcWs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createRtDcW(@RequestBody RtDcW rtDcW) {
    // an entity with id rtDcW.id should not exist
    if (rtDcWRepository.findById(rtDcW.id).isPresent()) return ResponseEntity.status(400).build();
    RtDcWEntity node = new RtDcWEntity();
    node.setId(rtDcW.id);
    node.setName(rtDcW.name);
    node.setValue(rtDcW.value);
    // save the entity
    rtDcWRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/rtDcWs/{rtDcWsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateRtDcW(
      @PathVariable(name = "rtDcWsId") Integer rtDcWsId, @RequestBody RtDcW rtDcW) {
    rtDcW.id = rtDcWsId;
    RtDcWEntity node = null;
    if (rtDcWRepository.findById(rtDcW.id).isPresent())
      node = rtDcWRepository.findById(rtDcW.id).get();
    else {
      node = new RtDcWEntity();
      node.setId(rtDcW.id);
    }
    node.setName(rtDcW.name);
    node.setValue(rtDcW.value);
    // save the entity
    rtDcWRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/rtDcWs/{rtDcWsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<RtDcW> getRtDcWById(@PathVariable(name = "rtDcWsId") Integer rtDcWsId) {
    if (!rtDcWRepository.findById(rtDcWsId).isPresent()) return ResponseEntity.status(404).build();
    RtDcW dto = rtDcWRepository.findById(rtDcWsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/rtDcWs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<RtDcW>> getAllRtDcW() {
    List<RtDcW> allDtos = new ArrayList<>();
    for (RtDcWEntity e : rtDcWRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/rtDcWs/{rtDcWsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateRtDcWByValues(
      @PathVariable(name = "rtDcWsId") Integer rtDcWsId,
      @RequestParam(name = "rtDcWsname", required = false) String rtDcWsname,
      @RequestParam(name = "rtDcWsvalue", required = false) Integer rtDcWsvalue) {
    if (!rtDcWRepository.findById(rtDcWsId).isPresent()) return ResponseEntity.status(404).build();
    RtDcWEntity node = rtDcWRepository.findById(rtDcWsId).get();
    if (rtDcWsname != null) {
      node.setName(rtDcWsname);
    }
    if (rtDcWsvalue != null) {
      node.setValue(rtDcWsvalue);
    }
    // save the entity
    rtDcWRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/rtDcWs/{rtDcWsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteRtDcW(@PathVariable(name = "rtDcWsId") Integer rtDcWsId) {
    // an entity with id rtDcWsId should exist
    if (!rtDcWRepository.findById(rtDcWsId).isPresent()) return ResponseEntity.status(404).build();
    rtDcWRepository.deleteById(rtDcWsId);
    return ResponseEntity.status(200).build();
  }
}
