package org.autogenerated.rest.artificial.cs.n5mediumpdshown.service;

import org.autogenerated.rest.artificial.cs.n5mediumpdshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumpdshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class I4AFGRestAPI {
  @Autowired private I4AFGRepository i4AFGRepository;

  @RequestMapping(
      value = "/i4AFGs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createI4AFG(@RequestBody I4AFG i4AFG) {
    // an entity with id i4AFG.id should not exist
    if (i4AFGRepository.findById(i4AFG.id).isPresent()) return ResponseEntity.status(400).build();
    I4AFGEntity node = new I4AFGEntity();
    node.setId(i4AFG.id);
    node.setName(i4AFG.name);
    node.setValue(i4AFG.value);
    // save the entity
    i4AFGRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/i4AFGs/{i4AFGsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateI4AFG(
      @PathVariable(name = "i4AFGsId") Integer i4AFGsId, @RequestBody I4AFG i4AFG) {
    i4AFG.id = i4AFGsId;
    I4AFGEntity node = null;
    if (i4AFGRepository.findById(i4AFG.id).isPresent())
      node = i4AFGRepository.findById(i4AFG.id).get();
    else {
      node = new I4AFGEntity();
      node.setId(i4AFG.id);
    }
    node.setName(i4AFG.name);
    node.setValue(i4AFG.value);
    // save the entity
    i4AFGRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/i4AFGs/{i4AFGsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<I4AFG> getI4AFGById(@PathVariable(name = "i4AFGsId") Integer i4AFGsId) {
    if (!i4AFGRepository.findById(i4AFGsId).isPresent()) return ResponseEntity.status(404).build();
    I4AFG dto = i4AFGRepository.findById(i4AFGsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/i4AFGs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<I4AFG>> getAllI4AFG() {
    List<I4AFG> allDtos = new ArrayList<>();
    for (I4AFGEntity e : i4AFGRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/i4AFGs/{i4AFGsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateI4AFGByValues(
      @PathVariable(name = "i4AFGsId") Integer i4AFGsId,
      @RequestParam(name = "i4AFGsname", required = false) String i4AFGsname,
      @RequestParam(name = "i4AFGsvalue", required = false) Integer i4AFGsvalue) {
    if (!i4AFGRepository.findById(i4AFGsId).isPresent()) return ResponseEntity.status(404).build();
    I4AFGEntity node = i4AFGRepository.findById(i4AFGsId).get();
    if (i4AFGsname != null) {
      node.setName(i4AFGsname);
    }
    if (i4AFGsvalue != null) {
      node.setValue(i4AFGsvalue);
    }
    // save the entity
    i4AFGRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/i4AFGs/{i4AFGsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteI4AFG(@PathVariable(name = "i4AFGsId") Integer i4AFGsId) {
    // an entity with id i4AFGsId should exist
    if (!i4AFGRepository.findById(i4AFGsId).isPresent()) return ResponseEntity.status(404).build();
    i4AFGRepository.deleteById(i4AFGsId);
    return ResponseEntity.status(200).build();
  }
}
