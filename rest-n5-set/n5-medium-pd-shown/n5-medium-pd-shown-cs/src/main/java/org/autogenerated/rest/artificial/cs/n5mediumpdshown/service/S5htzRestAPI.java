package org.autogenerated.rest.artificial.cs.n5mediumpdshown.service;

import org.autogenerated.rest.artificial.cs.n5mediumpdshown.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumpdshown.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class S5htzRestAPI {
  @Autowired private S5htzRepository s5htzRepository;
  @Autowired private I4AFGRepository i4AFGRepository;

  @RequestMapping(
      value = "/i4AFGs/{i4AFGId}/s5htzs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createS5htz(
      @RequestBody S5htz s5htz, @PathVariable(name = "i4AFGId") Integer i4AFGId) {
    // an entity with id s5htz.id should not exist
    if (s5htzRepository.findById(s5htz.id).isPresent()) return ResponseEntity.status(400).build();
    S5htzEntity node = new S5htzEntity();
    node.setId(s5htz.id);
    // refer to related entity
    if (!i4AFGRepository.findById(s5htz.i4AFGId).isPresent())
      return ResponseEntity.status(404).build();
    I4AFGEntity referVarToI4AFGEntity = i4AFGRepository.findById(s5htz.i4AFGId).get();
    node.setI4AFG(referVarToI4AFGEntity);
    node.setName(s5htz.name);
    node.setValue(s5htz.value);
    // additional codes for handling dependency
    if (!(node.getValue() == referVarToI4AFGEntity.getValue()))
      return ResponseEntity.status(400).build();
    // save the entity
    s5htzRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/i4AFGs/{i4AFGId}/s5htzs/{s5htzsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateS5htz(
      @PathVariable(name = "s5htzsId") Integer s5htzsId,
      @RequestBody S5htz s5htz,
      @PathVariable(name = "i4AFGId") Integer i4AFGId) {
    s5htz.id = s5htzsId;
    S5htzEntity node = null;
    if (s5htzRepository.findById(s5htz.id).isPresent())
      node = s5htzRepository.findById(s5htz.id).get();
    else {
      node = new S5htzEntity();
      node.setId(s5htz.id);
    }
    // refer to related entity
    if (!i4AFGRepository.findById(s5htz.i4AFGId).isPresent())
      return ResponseEntity.status(404).build();
    I4AFGEntity referVarToI4AFGEntity = i4AFGRepository.findById(s5htz.i4AFGId).get();
    node.setI4AFG(referVarToI4AFGEntity);
    node.setName(s5htz.name);
    node.setValue(s5htz.value);
    // additional codes for handling dependency
    if (!(node.getValue() == referVarToI4AFGEntity.getValue()))
      return ResponseEntity.status(400).build();
    // save the entity
    s5htzRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/i4AFGs/{i4AFGId}/s5htzs/{s5htzsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<S5htz> getS5htzById(
      @PathVariable(name = "s5htzsId") Integer s5htzsId,
      @PathVariable(name = "i4AFGId") Integer i4AFGId) {
    if (!s5htzRepository.findById(s5htzsId).isPresent()) return ResponseEntity.status(404).build();
    S5htz dto = s5htzRepository.findById(s5htzsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/i4AFGs/{i4AFGId}/s5htzs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<S5htz>> getAllWithConditionS5htz(
      @PathVariable(name = "i4AFGId") Integer i4AFGId) {
    List<S5htz> allDtos = new ArrayList<>();
    for (S5htzEntity e : s5htzRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/i4AFGs/{i4AFGId}/s5htzs/{s5htzsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateS5htzByValues(
      @PathVariable(name = "s5htzsId") Integer s5htzsId,
      @RequestParam(name = "s5htzsname", required = false) String s5htzsname,
      @RequestParam(name = "s5htzsvalue", required = false) Integer s5htzsvalue,
      @PathVariable(name = "i4AFGId") Integer i4AFGId) {
    if (!s5htzRepository.findById(s5htzsId).isPresent()) return ResponseEntity.status(404).build();
    S5htzEntity node = s5htzRepository.findById(s5htzsId).get();
    // refer to related entity
    I4AFGEntity referVarToI4AFGEntity = null;
    if (i4AFGId != null) {
      if (!i4AFGRepository.findById(i4AFGId).isPresent()) return ResponseEntity.status(400).build();
      referVarToI4AFGEntity = i4AFGRepository.findById(i4AFGId).get();
      node.setI4AFG(referVarToI4AFGEntity);
    } else {
      referVarToI4AFGEntity = node.getI4AFG();
    }
    if (s5htzsname != null) {
      node.setName(s5htzsname);
    }
    if (s5htzsvalue != null) {
      node.setValue(s5htzsvalue);
    }
    // additional codes for handling dependency
    if (!(node.getValue() == referVarToI4AFGEntity.getValue()))
      return ResponseEntity.status(400).build();
    // save the entity
    s5htzRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/i4AFGs/{i4AFGId}/s5htzs/{s5htzsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteWithConditionS5htz(
      @PathVariable(name = "s5htzsId") Integer s5htzsId,
      @PathVariable(name = "i4AFGId") Integer i4AFGId) {
    // an entity with id s5htzsId should exist
    if (!s5htzRepository.findById(s5htzsId).isPresent()) return ResponseEntity.status(404).build();
    s5htzRepository.deleteById(s5htzsId);
    return ResponseEntity.status(200).build();
  }
}
