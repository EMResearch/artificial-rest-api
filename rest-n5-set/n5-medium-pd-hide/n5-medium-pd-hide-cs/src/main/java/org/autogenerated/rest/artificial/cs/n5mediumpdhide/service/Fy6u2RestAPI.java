package org.autogenerated.rest.artificial.cs.n5mediumpdhide.service;

import org.autogenerated.rest.artificial.cs.n5mediumpdhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumpdhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class Fy6u2RestAPI {
  @Autowired private Fy6u2Repository fy6u2Repository;

  @RequestMapping(
      value = "/fy6u2s",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createFy6u2(@RequestBody Fy6u2 fy6u2) {
    // an entity with id fy6u2.id should not exist
    if (fy6u2Repository.findById(fy6u2.id).isPresent()) return ResponseEntity.status(400).build();
    Fy6u2Entity node = new Fy6u2Entity();
    node.setId(fy6u2.id);
    node.setName(fy6u2.name);
    node.setValue(fy6u2.value);
    // save the entity
    fy6u2Repository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/fy6u2s/{fy6u2sId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateFy6u2(
      @PathVariable(name = "fy6u2sId") Integer fy6u2sId, @RequestBody Fy6u2 fy6u2) {
    fy6u2.id = fy6u2sId;
    Fy6u2Entity node = null;
    if (fy6u2Repository.findById(fy6u2.id).isPresent())
      node = fy6u2Repository.findById(fy6u2.id).get();
    else {
      node = new Fy6u2Entity();
      node.setId(fy6u2.id);
    }
    node.setName(fy6u2.name);
    node.setValue(fy6u2.value);
    // save the entity
    fy6u2Repository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/fy6u2s/{fy6u2sId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<Fy6u2> getFy6u2ById(@PathVariable(name = "fy6u2sId") Integer fy6u2sId) {
    if (!fy6u2Repository.findById(fy6u2sId).isPresent()) return ResponseEntity.status(404).build();
    Fy6u2 dto = fy6u2Repository.findById(fy6u2sId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/fy6u2s",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<Fy6u2>> getAllFy6u2() {
    List<Fy6u2> allDtos = new ArrayList<>();
    for (Fy6u2Entity e : fy6u2Repository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/fy6u2s/{fy6u2sId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateFy6u2ByValues(
      @PathVariable(name = "fy6u2sId") Integer fy6u2sId,
      @RequestParam(name = "fy6u2sname", required = false) String fy6u2sname,
      @RequestParam(name = "fy6u2svalue", required = false) Integer fy6u2svalue) {
    if (!fy6u2Repository.findById(fy6u2sId).isPresent()) return ResponseEntity.status(404).build();
    Fy6u2Entity node = fy6u2Repository.findById(fy6u2sId).get();
    if (fy6u2sname != null) {
      node.setName(fy6u2sname);
    }
    if (fy6u2svalue != null) {
      node.setValue(fy6u2svalue);
    }
    // save the entity
    fy6u2Repository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/fy6u2s/{fy6u2sId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteFy6u2(@PathVariable(name = "fy6u2sId") Integer fy6u2sId) {
    // an entity with id fy6u2sId should exist
    if (!fy6u2Repository.findById(fy6u2sId).isPresent()) return ResponseEntity.status(404).build();
    fy6u2Repository.deleteById(fy6u2sId);
    return ResponseEntity.status(200).build();
  }
}
