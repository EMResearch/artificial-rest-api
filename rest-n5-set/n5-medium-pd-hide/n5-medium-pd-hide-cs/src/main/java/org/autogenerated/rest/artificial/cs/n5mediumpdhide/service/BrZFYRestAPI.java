package org.autogenerated.rest.artificial.cs.n5mediumpdhide.service;

import org.autogenerated.rest.artificial.cs.n5mediumpdhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumpdhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class BrZFYRestAPI {
  @Autowired private BrZFYRepository brZFYRepository;
  @Autowired private RpZ1MRepository rpZ1MRepository;

  @RequestMapping(
      value = "/brZFYs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createBrZFY(@RequestBody BrZFY brZFY) {
    // an entity with id brZFY.id should not exist
    if (brZFYRepository.findById(brZFY.id).isPresent()) return ResponseEntity.status(400).build();
    BrZFYEntity node = new BrZFYEntity();
    node.setId(brZFY.id);
    // refer to related entity
    if (!rpZ1MRepository.findById(brZFY.rpZ1MId).isPresent())
      return ResponseEntity.status(404).build();
    RpZ1MEntity referVarToRpZ1MEntity = rpZ1MRepository.findById(brZFY.rpZ1MId).get();
    node.setRpZ1M(referVarToRpZ1MEntity);
    node.setName(brZFY.name);
    node.setValue(brZFY.value);
    // additional codes for handling dependency
    if (!(node.getValue() == referVarToRpZ1MEntity.getValue()))
      return ResponseEntity.status(400).build();
    // save the entity
    brZFYRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/brZFYs/{brZFYsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateBrZFY(
      @PathVariable(name = "brZFYsId") Integer brZFYsId, @RequestBody BrZFY brZFY) {
    brZFY.id = brZFYsId;
    BrZFYEntity node = null;
    if (brZFYRepository.findById(brZFY.id).isPresent())
      node = brZFYRepository.findById(brZFY.id).get();
    else {
      node = new BrZFYEntity();
      node.setId(brZFY.id);
    }
    // refer to related entity
    if (!rpZ1MRepository.findById(brZFY.rpZ1MId).isPresent())
      return ResponseEntity.status(404).build();
    RpZ1MEntity referVarToRpZ1MEntity = rpZ1MRepository.findById(brZFY.rpZ1MId).get();
    node.setRpZ1M(referVarToRpZ1MEntity);
    node.setName(brZFY.name);
    node.setValue(brZFY.value);
    // additional codes for handling dependency
    if (!(node.getValue() == referVarToRpZ1MEntity.getValue()))
      return ResponseEntity.status(400).build();
    // save the entity
    brZFYRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/brZFYs/{brZFYsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<BrZFY> getBrZFYById(@PathVariable(name = "brZFYsId") Integer brZFYsId) {
    if (!brZFYRepository.findById(brZFYsId).isPresent()) return ResponseEntity.status(404).build();
    BrZFY dto = brZFYRepository.findById(brZFYsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/brZFYs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<BrZFY>> getAllBrZFY() {
    List<BrZFY> allDtos = new ArrayList<>();
    for (BrZFYEntity e : brZFYRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/brZFYs/{brZFYsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateBrZFYByValues(
      @PathVariable(name = "brZFYsId") Integer brZFYsId,
      @RequestParam(name = "brZFYsname", required = false) String brZFYsname,
      @RequestParam(name = "brZFYsvalue", required = false) Integer brZFYsvalue,
      @RequestParam(name = "rpZ1MId", required = false) Integer rpZ1MId) {
    if (!brZFYRepository.findById(brZFYsId).isPresent()) return ResponseEntity.status(404).build();
    BrZFYEntity node = brZFYRepository.findById(brZFYsId).get();
    // refer to related entity
    RpZ1MEntity referVarToRpZ1MEntity = null;
    if (rpZ1MId != null) {
      if (!rpZ1MRepository.findById(rpZ1MId).isPresent()) return ResponseEntity.status(400).build();
      referVarToRpZ1MEntity = rpZ1MRepository.findById(rpZ1MId).get();
      node.setRpZ1M(referVarToRpZ1MEntity);
    } else {
      referVarToRpZ1MEntity = node.getRpZ1M();
    }
    if (brZFYsname != null) {
      node.setName(brZFYsname);
    }
    if (brZFYsvalue != null) {
      node.setValue(brZFYsvalue);
    }
    // additional codes for handling dependency
    if (!(node.getValue() == referVarToRpZ1MEntity.getValue()))
      return ResponseEntity.status(400).build();
    // save the entity
    brZFYRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/brZFYs/{brZFYsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteBrZFY(@PathVariable(name = "brZFYsId") Integer brZFYsId) {
    // an entity with id brZFYsId should exist
    if (!brZFYRepository.findById(brZFYsId).isPresent()) return ResponseEntity.status(404).build();
    brZFYRepository.deleteById(brZFYsId);
    return ResponseEntity.status(200).build();
  }
}
