package org.autogenerated.rest.artificial.cs.n5mediumpdhide.service;

import org.autogenerated.rest.artificial.cs.n5mediumpdhide.entity.*;
import org.autogenerated.rest.artificial.cs.n5mediumpdhide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class RpZ1MRestAPI {
  @Autowired private RpZ1MRepository rpZ1MRepository;
  @Autowired private VWyPIRepository vWyPIRepository;

  @RequestMapping(
      value = "/rpZ1Ms",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createRpZ1M(@RequestBody RpZ1M rpZ1M) {
    // an entity with id rpZ1M.id should not exist
    if (rpZ1MRepository.findById(rpZ1M.id).isPresent()) return ResponseEntity.status(400).build();
    RpZ1MEntity node = new RpZ1MEntity();
    node.setId(rpZ1M.id);
    // refer to related entity
    if (!vWyPIRepository.findById(rpZ1M.vWyPIId).isPresent())
      return ResponseEntity.status(404).build();
    VWyPIEntity referVarToVWyPIEntity = vWyPIRepository.findById(rpZ1M.vWyPIId).get();
    node.setVWyPI(referVarToVWyPIEntity);
    node.setName(rpZ1M.name);
    node.setValue(rpZ1M.value);
    // additional codes for handling dependency
    if (!(node.getValue() == referVarToVWyPIEntity.getValue()))
      return ResponseEntity.status(400).build();
    // save the entity
    rpZ1MRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/rpZ1Ms/{rpZ1MsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateRpZ1M(
      @PathVariable(name = "rpZ1MsId") Integer rpZ1MsId, @RequestBody RpZ1M rpZ1M) {
    rpZ1M.id = rpZ1MsId;
    RpZ1MEntity node = null;
    if (rpZ1MRepository.findById(rpZ1M.id).isPresent())
      node = rpZ1MRepository.findById(rpZ1M.id).get();
    else {
      node = new RpZ1MEntity();
      node.setId(rpZ1M.id);
    }
    // refer to related entity
    if (!vWyPIRepository.findById(rpZ1M.vWyPIId).isPresent())
      return ResponseEntity.status(404).build();
    VWyPIEntity referVarToVWyPIEntity = vWyPIRepository.findById(rpZ1M.vWyPIId).get();
    node.setVWyPI(referVarToVWyPIEntity);
    node.setName(rpZ1M.name);
    node.setValue(rpZ1M.value);
    // additional codes for handling dependency
    if (!(node.getValue() == referVarToVWyPIEntity.getValue()))
      return ResponseEntity.status(400).build();
    // save the entity
    rpZ1MRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/rpZ1Ms/{rpZ1MsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<RpZ1M> getRpZ1MById(@PathVariable(name = "rpZ1MsId") Integer rpZ1MsId) {
    if (!rpZ1MRepository.findById(rpZ1MsId).isPresent()) return ResponseEntity.status(404).build();
    RpZ1M dto = rpZ1MRepository.findById(rpZ1MsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/rpZ1Ms",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<RpZ1M>> getAllRpZ1M() {
    List<RpZ1M> allDtos = new ArrayList<>();
    for (RpZ1MEntity e : rpZ1MRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/rpZ1Ms/{rpZ1MsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateRpZ1MByValues(
      @PathVariable(name = "rpZ1MsId") Integer rpZ1MsId,
      @RequestParam(name = "rpZ1Msname", required = false) String rpZ1Msname,
      @RequestParam(name = "rpZ1Msvalue", required = false) Integer rpZ1Msvalue,
      @RequestParam(name = "vWyPIId", required = false) Integer vWyPIId) {
    if (!rpZ1MRepository.findById(rpZ1MsId).isPresent()) return ResponseEntity.status(404).build();
    RpZ1MEntity node = rpZ1MRepository.findById(rpZ1MsId).get();
    // refer to related entity
    VWyPIEntity referVarToVWyPIEntity = null;
    if (vWyPIId != null) {
      if (!vWyPIRepository.findById(vWyPIId).isPresent()) return ResponseEntity.status(400).build();
      referVarToVWyPIEntity = vWyPIRepository.findById(vWyPIId).get();
      node.setVWyPI(referVarToVWyPIEntity);
    } else {
      referVarToVWyPIEntity = node.getVWyPI();
    }
    if (rpZ1Msname != null) {
      node.setName(rpZ1Msname);
    }
    if (rpZ1Msvalue != null) {
      node.setValue(rpZ1Msvalue);
    }
    // additional codes for handling dependency
    if (!(node.getValue() == referVarToVWyPIEntity.getValue()))
      return ResponseEntity.status(400).build();
    // save the entity
    rpZ1MRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/rpZ1Ms/{rpZ1MsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteRpZ1M(@PathVariable(name = "rpZ1MsId") Integer rpZ1MsId) {
    // an entity with id rpZ1MsId should exist
    if (!rpZ1MRepository.findById(rpZ1MsId).isPresent()) return ResponseEntity.status(404).build();
    rpZ1MRepository.deleteById(rpZ1MsId);
    return ResponseEntity.status(200).build();
  }
}
