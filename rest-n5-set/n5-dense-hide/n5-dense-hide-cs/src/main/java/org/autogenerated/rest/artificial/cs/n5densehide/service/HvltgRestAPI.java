package org.autogenerated.rest.artificial.cs.n5densehide.service;

import org.autogenerated.rest.artificial.cs.n5densehide.entity.*;
import org.autogenerated.rest.artificial.cs.n5densehide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class HvltgRestAPI {
  @Autowired private HvltgRepository hvltgRepository;
  @Autowired private YaDPDRepository yaDPDRepository;
  @Autowired private KuGn6Repository kuGn6Repository;
  @Autowired private NSPiiRepository nSPiiRepository;
  @Autowired private WUaJGRepository wUaJGRepository;
  @Autowired private NSPiiRestAPI nSPiiRestAPI;
  @Autowired private WUaJGRestAPI wUaJGRestAPI;

  @RequestMapping(
      value = "/hvltgs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createHvltg(@RequestBody Hvltg hvltg) {
    // an entity with id hvltg.id should not exist
    if (hvltgRepository.findById(hvltg.id).isPresent()) return ResponseEntity.status(400).build();
    HvltgEntity node = new HvltgEntity();
    node.setId(hvltg.id);
    // create owned entity
    NSPii ownedDto0 = new NSPii();
    ownedDto0.name = hvltg.nSPiiName;
    ownedDto0.value = hvltg.nSPiiValue;
    ownedDto0.id = hvltg.nSPiiId;
    int ownedDto0Code = nSPiiRestAPI.createNSPii(ownedDto0).getStatusCode().value();
    if (!nSPiiRepository.findById(hvltg.nSPiiId).isPresent())
      return ResponseEntity.status(ownedDto0Code).build();
    NSPiiEntity ownedEntityNSPiiEntity = nSPiiRepository.findById(hvltg.nSPiiId).get();
    node.setOwnedNSPii(ownedEntityNSPiiEntity);
    WUaJG ownedDto1 = new WUaJG();
    ownedDto1.name = hvltg.wUaJGName;
    ownedDto1.value = hvltg.wUaJGValue;
    ownedDto1.id = hvltg.wUaJGId;
    int ownedDto1Code = wUaJGRestAPI.createWUaJG(ownedDto1).getStatusCode().value();
    if (!wUaJGRepository.findById(hvltg.wUaJGId).isPresent())
      return ResponseEntity.status(ownedDto1Code).build();
    WUaJGEntity ownedEntityWUaJGEntity = wUaJGRepository.findById(hvltg.wUaJGId).get();
    node.setOwnedWUaJG(ownedEntityWUaJGEntity);
    // refer to related entity
    if (!yaDPDRepository.findById(hvltg.yaDPDId).isPresent())
      return ResponseEntity.status(404).build();
    YaDPDEntity referVarToYaDPDEntity = yaDPDRepository.findById(hvltg.yaDPDId).get();
    node.setYaDPD(referVarToYaDPDEntity);
    if (!kuGn6Repository.findById(hvltg.kuGn6Id).isPresent())
      return ResponseEntity.status(404).build();
    KuGn6Entity referVarToKuGn6Entity = kuGn6Repository.findById(hvltg.kuGn6Id).get();
    node.setKuGn6(referVarToKuGn6Entity);
    node.setName(hvltg.name);
    node.setValue(hvltg.value);
    // save the entity
    hvltgRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/hvltgs/{hvltgsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateHvltg(
      @PathVariable(name = "hvltgsId") Integer hvltgsId, @RequestBody Hvltg hvltg) {
    hvltg.id = hvltgsId;
    HvltgEntity node = null;
    if (hvltgRepository.findById(hvltg.id).isPresent())
      node = hvltgRepository.findById(hvltg.id).get();
    else {
      node = new HvltgEntity();
      node.setId(hvltg.id);
    }
    // create owned entity
    NSPii ownedDto0 = new NSPii();
    ownedDto0.name = hvltg.nSPiiName;
    ownedDto0.value = hvltg.nSPiiValue;
    ownedDto0.id = hvltg.nSPiiId;
    int ownedDto0Code = nSPiiRestAPI.createNSPii(ownedDto0).getStatusCode().value();
    if (!nSPiiRepository.findById(hvltg.nSPiiId).isPresent())
      return ResponseEntity.status(ownedDto0Code).build();
    NSPiiEntity ownedEntityNSPiiEntity = nSPiiRepository.findById(hvltg.nSPiiId).get();
    node.setOwnedNSPii(ownedEntityNSPiiEntity);
    WUaJG ownedDto1 = new WUaJG();
    ownedDto1.name = hvltg.wUaJGName;
    ownedDto1.value = hvltg.wUaJGValue;
    ownedDto1.id = hvltg.wUaJGId;
    int ownedDto1Code = wUaJGRestAPI.createWUaJG(ownedDto1).getStatusCode().value();
    if (!wUaJGRepository.findById(hvltg.wUaJGId).isPresent())
      return ResponseEntity.status(ownedDto1Code).build();
    WUaJGEntity ownedEntityWUaJGEntity = wUaJGRepository.findById(hvltg.wUaJGId).get();
    node.setOwnedWUaJG(ownedEntityWUaJGEntity);
    // refer to related entity
    if (!yaDPDRepository.findById(hvltg.yaDPDId).isPresent())
      return ResponseEntity.status(404).build();
    YaDPDEntity referVarToYaDPDEntity = yaDPDRepository.findById(hvltg.yaDPDId).get();
    node.setYaDPD(referVarToYaDPDEntity);
    if (!kuGn6Repository.findById(hvltg.kuGn6Id).isPresent())
      return ResponseEntity.status(404).build();
    KuGn6Entity referVarToKuGn6Entity = kuGn6Repository.findById(hvltg.kuGn6Id).get();
    node.setKuGn6(referVarToKuGn6Entity);
    node.setName(hvltg.name);
    node.setValue(hvltg.value);
    // save the entity
    hvltgRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/hvltgs/{hvltgsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<Hvltg> getHvltgById(@PathVariable(name = "hvltgsId") Integer hvltgsId) {
    if (!hvltgRepository.findById(hvltgsId).isPresent()) return ResponseEntity.status(404).build();
    Hvltg dto = hvltgRepository.findById(hvltgsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/hvltgs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<Hvltg>> getAllHvltg() {
    List<Hvltg> allDtos = new ArrayList<>();
    for (HvltgEntity e : hvltgRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/hvltgs/{hvltgsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateHvltgByValues(
      @PathVariable(name = "hvltgsId") Integer hvltgsId,
      @RequestParam(name = "hvltgsname", required = false) String hvltgsname,
      @RequestParam(name = "hvltgsvalue", required = false) Integer hvltgsvalue,
      @RequestParam(name = "yaDPDId", required = false) Integer yaDPDId,
      @RequestParam(name = "kuGn6Id", required = false) Integer kuGn6Id,
      @RequestParam(name = "nSPiiName", required = false) String nSPiiName,
      @RequestParam(name = "nSPiiValue", required = false) Integer nSPiiValue,
      @RequestParam(name = "wUaJGName", required = false) String wUaJGName,
      @RequestParam(name = "wUaJGValue", required = false) Integer wUaJGValue) {
    if (!hvltgRepository.findById(hvltgsId).isPresent()) return ResponseEntity.status(404).build();
    HvltgEntity node = hvltgRepository.findById(hvltgsId).get();
    // update owned entity
    if (!nSPiiRepository.findById(node.getOwnedNSPii().getId()).isPresent())
      return ResponseEntity.status(404).build();
    NSPiiEntity ownedEntity0 = nSPiiRepository.findById(node.getOwnedNSPii().getId()).get();
    if (nSPiiName != null || nSPiiValue != null) {
      if (nSPiiName != null) ownedEntity0.setName(nSPiiName);
      if (nSPiiValue != null) ownedEntity0.setValue(nSPiiValue);
      nSPiiRepository.save(ownedEntity0);
    }
    NSPii ownedDto0 = ownedEntity0.getDto();
    if (!wUaJGRepository.findById(node.getOwnedWUaJG().getId()).isPresent())
      return ResponseEntity.status(404).build();
    WUaJGEntity ownedEntity1 = wUaJGRepository.findById(node.getOwnedWUaJG().getId()).get();
    if (wUaJGName != null || wUaJGValue != null) {
      if (wUaJGName != null) ownedEntity1.setName(wUaJGName);
      if (wUaJGValue != null) ownedEntity1.setValue(wUaJGValue);
      wUaJGRepository.save(ownedEntity1);
    }
    WUaJG ownedDto1 = ownedEntity1.getDto();
    // refer to related entity
    YaDPDEntity referVarToYaDPDEntity = null;
    if (yaDPDId != null) {
      if (!yaDPDRepository.findById(yaDPDId).isPresent()) return ResponseEntity.status(400).build();
      referVarToYaDPDEntity = yaDPDRepository.findById(yaDPDId).get();
      node.setYaDPD(referVarToYaDPDEntity);
    } else {
      referVarToYaDPDEntity = node.getYaDPD();
    }
    KuGn6Entity referVarToKuGn6Entity = null;
    if (kuGn6Id != null) {
      if (!kuGn6Repository.findById(kuGn6Id).isPresent()) return ResponseEntity.status(400).build();
      referVarToKuGn6Entity = kuGn6Repository.findById(kuGn6Id).get();
      node.setKuGn6(referVarToKuGn6Entity);
    } else {
      referVarToKuGn6Entity = node.getKuGn6();
    }
    if (hvltgsname != null) {
      node.setName(hvltgsname);
    }
    if (hvltgsvalue != null) {
      node.setValue(hvltgsvalue);
    }
    // save the entity
    hvltgRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/hvltgs/{hvltgsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteHvltg(@PathVariable(name = "hvltgsId") Integer hvltgsId) {
    // an entity with id hvltgsId should exist
    if (!hvltgRepository.findById(hvltgsId).isPresent()) return ResponseEntity.status(404).build();
    hvltgRepository.deleteById(hvltgsId);
    return ResponseEntity.status(200).build();
  }
}
