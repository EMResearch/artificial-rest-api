package org.autogenerated.rest.artificial.cs.n5densehide.service;

import org.autogenerated.rest.artificial.cs.n5densehide.entity.*;
import org.autogenerated.rest.artificial.cs.n5densehide.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.ws.rs.core.MediaType;
import java.util.*;
/** automatically created on 2020-01-14 */
@RestController
@RequestMapping(path = "/api")
public class WUaJGRestAPI {
  @Autowired private WUaJGRepository wUaJGRepository;

  @RequestMapping(
      value = "/wUaJGs",
      method = RequestMethod.POST,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createWUaJG(@RequestBody WUaJG wUaJG) {
    // an entity with id wUaJG.id should not exist
    if (wUaJGRepository.findById(wUaJG.id).isPresent()) return ResponseEntity.status(400).build();
    WUaJGEntity node = new WUaJGEntity();
    node.setId(wUaJG.id);
    node.setName(wUaJG.name);
    node.setValue(wUaJG.value);
    // save the entity
    wUaJGRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/wUaJGs/{wUaJGsId}",
      method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON)
  public ResponseEntity createOrUpdateWUaJG(
      @PathVariable(name = "wUaJGsId") Integer wUaJGsId, @RequestBody WUaJG wUaJG) {
    wUaJG.id = wUaJGsId;
    WUaJGEntity node = null;
    if (wUaJGRepository.findById(wUaJG.id).isPresent())
      node = wUaJGRepository.findById(wUaJG.id).get();
    else {
      node = new WUaJGEntity();
      node.setId(wUaJG.id);
    }
    node.setName(wUaJG.name);
    node.setValue(wUaJG.value);
    // save the entity
    wUaJGRepository.save(node);
    return ResponseEntity.status(201).build();
  }

  @RequestMapping(
      value = "/wUaJGs/{wUaJGsId}",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<WUaJG> getWUaJGById(@PathVariable(name = "wUaJGsId") Integer wUaJGsId) {
    if (!wUaJGRepository.findById(wUaJGsId).isPresent()) return ResponseEntity.status(404).build();
    WUaJG dto = wUaJGRepository.findById(wUaJGsId).get().getDto();
    return ResponseEntity.ok(dto);
  }

  @RequestMapping(
      value = "/wUaJGs",
      method = RequestMethod.GET,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity<List<WUaJG>> getAllWUaJG() {
    List<WUaJG> allDtos = new ArrayList<>();
    for (WUaJGEntity e : wUaJGRepository.findAll()) {
      allDtos.add(e.getDto());
    }
    return ResponseEntity.ok(allDtos);
  }

  @RequestMapping(
      value = "/wUaJGs/{wUaJGsId}",
      method = RequestMethod.PATCH,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity updateWUaJGByValues(
      @PathVariable(name = "wUaJGsId") Integer wUaJGsId,
      @RequestParam(name = "wUaJGsname", required = false) String wUaJGsname,
      @RequestParam(name = "wUaJGsvalue", required = false) Integer wUaJGsvalue) {
    if (!wUaJGRepository.findById(wUaJGsId).isPresent()) return ResponseEntity.status(404).build();
    WUaJGEntity node = wUaJGRepository.findById(wUaJGsId).get();
    if (wUaJGsname != null) {
      node.setName(wUaJGsname);
    }
    if (wUaJGsvalue != null) {
      node.setValue(wUaJGsvalue);
    }
    // save the entity
    wUaJGRepository.save(node);
    return ResponseEntity.status(200).build();
  }

  @RequestMapping(
      value = "/wUaJGs/{wUaJGsId}",
      method = RequestMethod.DELETE,
      produces = MediaType.APPLICATION_JSON)
  public ResponseEntity deleteWUaJG(@PathVariable(name = "wUaJGsId") Integer wUaJGsId) {
    // an entity with id wUaJGsId should exist
    if (!wUaJGRepository.findById(wUaJGsId).isPresent()) return ResponseEntity.status(404).build();
    wUaJGRepository.deleteById(wUaJGsId);
    return ResponseEntity.status(200).build();
  }
}
